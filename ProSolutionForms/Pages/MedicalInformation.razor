@page "/MedicalInformation"
@page "/MedicalInformation/{StudentGUID}"

@using ProSolutionForms.Models
@using ProSolutionForms.Shared
@using System.Net
@inject HttpClient Http
@inject IConfiguration configuration
@inject NavigationManager NavManager
@inject ILogger<MedicalInformation> Logger

<PageTitle>Medical Information Form</PageTitle>

<Modal @ref="modalInfo">
    <Title><i class="fa-solid fa-circle-info"></i> @msgInfoTitle</Title>
    <Body>
        <p>
            @msgInfo
        </p>
    </Body>
    <Footer>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modalError!.Close()">Close</button>
    </Footer>
</Modal>

<Modal @ref="modalError">
    <Title><i class="fa-solid fa-triangle-exclamation"></i> @msgErrorTitle</Title>
    <Body>
        <div class="alert alert-danger" role="alert">
            @msgError
        </div>
        @if (msgErrorStackTrace != null) 
        {
            <p><i class="fa-solid fa-bug"></i> Stack Trace:</p>
            <pre class="pre-scrollable ErrorDetails">@msgErrorStackTrace</pre>
        }
    </Body>
    <Footer>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modalError!.Close()">Close</button>
    </Footer>
</Modal>

<Modal @ref="modalConfirm">
    <Title><i class="fa-solid fa-circle-question"></i> @msgConfirmTitle</Title>
    <Body>
        <p>
            @msgConfirm
        </p>
    </Body>
    <Footer>
        <button type="button" class="btn btn-danger" @onclick="FormAction"><i class="fa-solid fa-trash"></i> Yes</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modalConfirm!.Close()"><i class="fa-solid fa-right-from-bracket"></i> Cancel</button>
    </Footer>
</Modal>

<div class="container">
    <div class="row">
        <div class="col-md text-center">
            <img class="img-fluid CollegeLogo" src="/images/SHCG-Logo-Coloured-RGB.png" title="SHCG Logo" />
        </div>
    </div>
</div>

<div class="bd-callout bd-callout-SHCG-blue bd-callout-grey GreyBackground">
    <div class="container">
        <div class="row">
            <div class="col-md text-center">
                <h3 class="mt-3 mb-3"><i class="fa-solid fa-notes-medical"></i> Medical Information Form</h3>
            </div>
        </div>
    </div>

    @if (loadDataErrorMsg != null) 
    {
        <div class="container">
            <div class="row">
                <div class="col-md">
                    <div class="alert alert-danger hstack gap-3" role="alert">
                        <div>
                            <h1><i class="fa-solid fa-triangle-exclamation"></i></h1>
                        </div>
                        <div>
                            <p>
                                @loadDataErrorMsg
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (formSubmitted == true)
    {
        <div class="container">
            <div class="row">
                <div class="col-md">
                    <div class="alert alert-success hstack gap-3" role="alert">
                        <div class="ms-auto me-3">
                            <h1><i class="fa-solid fa-clipboard-check"></i></h1>
                        </div>
                        <div class="me-auto">
                            <h4 class="alert-heading">Medical Information Successfully Submitted</h4>
                            <hr>
                            <p>
                                Thank you for declaring your Medical Information.
                            </p>
                            <p>
                                We will be in touch with you soon to discuss the next steps.
                            </p>
                        </div>
                    </div>
                    <div class="alert alert-secondary" role="alert">
                        <div class="row">
                            <div class="col-md text-end">
                                <button type="button" class="btn btn-success" @onclick="GoToSHCGHomepage"><i class="fa-solid fa-arrow-up-right-from-square"></i> Go To The SHCG Website</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else if(student == null) {
        <div class="container">
            <div class="row">
                <div class="col-md">
                    <div class="alert alert-primary text-center" role="alert">
                        <h1>
                            <i class="fa-solid fa-spinner fa-spin"></i> Loading ...
                        </h1>
                    </div>
                </div>
            </div>
        </div>
    }
    else {
        <div class="bd-callout bd-callout-SHCG-yellow bd-callout-grey WhiteBackground">
            <div class="container">
                <div class="row mb-3 align-items-center">
                    <div class="col-md text-center">
                        <h4>Personal Information</h4>
                    </div>
                </div>
                <div class="row mb-3 align-items-center">
                    <div class="col-md-4">
                        <i class="fa-solid fa-user"></i> Name
                    </div>
                    <div class="col-md-8">
                        <strong>@student?.Forename @student?.Surname</strong>
                    </div>
                </div>
                <div class="row mb-3 align-items-center">
                    <div class="col-md-4">
                        <i class="fa-solid fa-briefcase"></i> Curriculum Area
                    </div>
                    <div class="col-md-8">
                        @student?.TeamName
                    </div>
                </div>
                <div class="row mb-3 align-items-center">
                    <div class="col-md-4">
                        <i class="fa-solid fa-graduation-cap"></i> Course
                    </div>
                    <div class="col-md-8">
                        @student?.CourseCode - @student?.CourseTitle
                    </div>
                </div>
            </div>
        </div>

        <EditForm FormName="MedicalInformation" Model="medicalInformation" OnValidSubmit="SubmitForm">
            <FluentValidationValidator @ref="_fluentValidationValidator" />
            <ValidationSummary />

            @if (medicalInformation != null) 
            {
                int? emergencyContactRow = 0;
                @if (medicalInformation?.EmergencyContacts != null)
                {
                    foreach (var contact in medicalInformation?.EmergencyContacts!)
                    {
                        emergencyContactRow++;

                        <div class="bd-callout bd-callout-SHCG-teal bd-callout-grey WhiteBackground">
                            <div class="container">
                                <div class="row">
                                    <div class="col-md">
                                        <div class="row mb-3 align-items-center">
                                            <div class="col-md text-center">
                                                <h4>Emergency Contact @emergencyContactRow</h4>
                                            </div>
                                        </div>

                                        <div class="row g-3 mb-3">
                                            <div class="col-md-4">
                                                <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Surname</label>
                                            </div>
                                            <div class="col-md-8">
                                                <InputText @bind-Value="contact!.Surname" class="form-control" />
                                                <ValidationMessage For="@(() => contact!.Surname)" />
                                            </div>
                                        </div>

                                        <div class="row g-3 mb-3">
                                            <div class="col-md-4">
                                                <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Forename</label>
                                            </div>
                                            <div class="col-md-8">
                                                <InputText @bind-Value="contact!.Forename" class="form-control" />
                                                <ValidationMessage For="@(() => contact!.Forename)" />
                                            </div>
                                        </div>

                                        <div class="row g-3 mb-3">
                                            <div class="col-md-4">
                                                <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Title</label>
                                            </div>
                                            <div class="col-md-8">
                                                @* <InputSelect @bind-Value="contact!.Title" bind="@Titles" class="form-select">
                                                    <option value=null>-- Please Select --</option>
                                                    @if (Titles != null)
                                                    {
                                                        @foreach (var title in Titles)
                                                        {
                                                            <option value="@title.Code">@title.Description</option>
                                                        }
                                                    }
                                                </InputSelect>
                                                <ValidationMessage For="@(() => contact!.Title)" /> *@

                                                <InputText @bind-Value="contact!.Title" class="form-control" list="TitlesList" />
                                                <datalist class="col-4" id="TitlesList">
                                                    @if (Titles != null)
                                                    {
                                                        @foreach (var option in Titles)
                                                        {
                                                            <option value="@option.Code">@option.Description</option>
                                                        }
                                                    }
                                                </datalist>
                                                <ValidationMessage For="@(() => contact!.Title)" />
                                            </div>
                                        </div>

                                        <div class="row g-3 mb-3">
                                            <div class="col-md-4">
                                                <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Relationship</label>
                                            </div>
                                            <div class="col-md-8">
                                                <InputNumber @bind-Value="contact!.RelationshipToStudent" class="form-control" list="RelationshipsList" />
                                                <datalist class="col-4" id="RelationshipsList">
                                                    @if (Relationships != null)
                                                    {
                                                        @foreach (var option in Relationships)
                                                        {
                                                            <option value="@option.Code">@option.Description</option>
                                                        }
                                                    }
                                                </datalist>
                                                <ValidationMessage For="@(() => contact!.RelationshipToStudent)" />
                                            </div>
                                        </div>

                                        <div class="row g-3 mb-3">
                                            <div class="col-md-4">
                                                <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Address 1</label>
                                            </div>
                                            <div class="col-md-8">
                                                <InputText @bind-Value="contact!.Address1" class="form-control" />
                                                <ValidationMessage For="@(() => contact!.Address1)" />
                                            </div>
                                        </div>

                                        <div class="row g-3 mb-3">
                                            <div class="col-md-4">
                                                <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Address 2</label>
                                            </div>
                                            <div class="col-md-8">
                                                <InputText @bind-Value="contact!.Address2" class="form-control" />
                                                <ValidationMessage For="@(() => contact!.Address2)" />
                                            </div>
                                        </div>

                                        <div class="row g-3 mb-3">
                                            <div class="col-md-4">
                                                <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Town</label>
                                            </div>
                                            <div class="col-md-8">
                                                <InputText @bind-Value="contact!.Address3" class="form-control" />
                                                <ValidationMessage For="@(() => contact!.Address3)" />
                                            </div>
                                        </div>

                                        <div class="row g-3 mb-3">
                                            <div class="col-md-4">
                                                <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> County</label>
                                            </div>
                                            <div class="col-md-8">
                                                <InputText @bind-Value="contact!.Address4" class="form-control" />
                                                <ValidationMessage For="@(() => contact!.Address4)" />
                                            </div>
                                        </div>

                                        <div class="row g-3 mb-3">
                                            <div class="col-md-4">
                                                <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Post Code</label>
                                            </div>
                                            <div class="col-auto">
                                                <InputText @bind-Value="contact!.PostCodeOut" size="4" maxlength="4" class="form-control" />
                                            </div>
                                            <div class="col-auto">
                                                <InputText @bind-Value="contact!.PostCodeIn" size="3" maxlength="3" class="form-control" />
                                            </div>
                                            <div class="col-md-12">
                                                <ValidationMessage For="@(() => contact!.PostCodeOut)" />
                                            </div>
                                        </div>

                                        <div class="row g-3 mb-3">
                                            <div class="col-md-4">
                                                <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Home Tel</label>
                                            </div>
                                            <div class="col-md-8">
                                                <InputText @bind-Value="contact!.TelHome" class="form-control" />
                                                <ValidationMessage For="@(() => contact!.TelHome)" />
                                            </div>
                                        </div>

                                        <div class="row g-3 mb-3">
                                            <div class="col-md-4">
                                                <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Work Tel</label>
                                            </div>
                                            <div class="col-md-8">
                                                <InputText @bind-Value="contact!.TelWork" class="form-control" />
                                                <ValidationMessage For="@(() => contact!.TelWork)" />
                                            </div>
                                        </div>

                                        <div class="row g-3 mb-3">
                                            <div class="col-md-4">
                                                <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Email</label>
                                            </div>
                                            <div class="col-md-8">
                                                <InputText @bind-Value="contact!.Email" class="form-control" />
                                                <ValidationMessage For="@(() => contact!.Email)" />
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
            }

            <div class="bd-callout bd-callout-SHCG-green bd-callout-grey WhiteBackground">
                <div class="container">
                    <div class="row">
                        <div class="col-md">
                            <div class="row mb-3 align-items-center">
                                <div class="col-md text-center">
                                    <h4>Medical Information</h4>
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Do you have any medical conditions?</label>
                                </div>
                                <div class="col-md-8">
                                    <CustomBoolInputSelect @bind-Value="medicalInformation!.HasMedicalCondition" class="form-select d-none">
                                        <option value="">-- Please Select --</option>
                                        <option value="true">Yes</option>
                                        <option value="false">No</option>
                                    </CustomBoolInputSelect>
                                    <div class="d-grid gap-2 d-md-block">
                                        <button type="button" class="btn @(medicalInformation!.HasMedicalCondition == true? "btn-primary" : "btn-outline-primary") YesNoButton me-md-3" @onclick="() => HasMedicalConditionToggle(true)"><i class="fa-solid fa-square-check"></i> Yes</button>
                                        <button type="button" class="btn @(medicalInformation!.HasMedicalCondition == false? "btn-secondary" : "btn-outline-secondary") YesNoButton" @onclick="() => HasMedicalConditionToggle(false)"><i class="fa-solid fa-square-xmark"></i> No</button>
                                    </div>
                                    <ValidationMessage For="@(() => medicalInformation!.HasMedicalCondition)" />
                                </div>
                            </div>

                            @* Medical Conditions List *@

                            @if (medicalInformation?.MedicalConditions != null)
                            {
                                int? medicalInformationRow = 0;
                                <div class="alert alert-warning" role="alert">
                                    <h4 class="alert-heading"><i class="fa-solid fa-notes-medical"></i> Medical Conditions</h4>

                                    <datalist class="col-4" id="MedicalConditionTypesList">
                                        @if (MedicalConditionTypes != null)
                                        {
                                            @foreach (var option in MedicalConditionTypes)
                                            {
                                                <option value="@option.Code">@option.Description</option>
                                            }
                                        }
                                    </datalist>

                                    @foreach (var condition in medicalInformation!.MedicalConditions)
                                    {
                                        medicalInformationRow++;

                                        <div class="row g-3 mb-3">
                                            <div class="col-md">
                                                <div class="card">
                                                    <div class="card-body">

                                                        <div class="row g-3 mb-3">
                                                            <div class="col-md-4">
                                                                <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Medical Condition</label>
                                                            </div>
                                                            <div class="col-md-8">
                                                                <InputNumber @bind-Value="condition!.MedicalConditionTypeID" class="form-control" list="MedicalConditionTypesList" />
                                                                <ValidationMessage For="@(() => condition!.MedicalConditionTypeID)" />
                                                            </div>
                                                        </div>

                                                        <div class="row g-3 mb-3">
                                                            <div class="col-md-4">
                                                                <label class="col-form-label"><i class="fa-solid fa-note-sticky"></i> Medication Details</label>
                                                            </div>
                                                            <div class="col-md-8">
                                                                <InputTextArea @bind-Value="condition!.MedicationDetails" class="form-control" />
                                                                <ValidationMessage For="@(() => condition!.MedicationDetails)" />
                                                            </div>
                                                        </div>

                                                        <div class="row g-3 mb-3">
                                                            <div class="col-md-4">
                                                                <label class="col-form-label"><i class="fa-solid fa-note-sticky"></i> Medication Schedule</label>
                                                            </div>
                                                            <div class="col-md-8">
                                                                <InputTextArea @bind-Value="condition!.MedicationSchedule" class="form-control" />
                                                                <ValidationMessage For="@(() => condition!.MedicationSchedule)" />
                                                            </div>
                                                        </div>

                                                        <div class="row g-3 mb-3">
                                                            <div class="col-md-4">
                                                                <label class="col-form-label"><i class="fa-solid fa-note-sticky"></i> Notes</label>
                                                            </div>
                                                            <div class="col-md-8">
                                                                <InputTextArea @bind-Value="condition!.Notes" class="form-control" />
                                                                <ValidationMessage For="@(() => condition!.Notes)" />
                                                            </div>
                                                        </div>
                                                        <div class="row g-3 mb-3">
                                                            <div class="col-md">
                                                                <div class="d-grid gap-2 d-md-block text-end">
                                                                    <button type="button" class="btn btn-danger" @onclick="() => RemoveMedicalConditionConfirm(condition?.MedicalInformationMedicalConditionID ?? 0)"><i class="fa-solid fa-rectangle-xmark"></i> Remove This Medical Condition</button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }

                                    <div class="alert alert-secondary" role="alert">
                                        <div class="row">
                                            <div class="col-md">
                                                <div class="d-grid gap-2 d-md-block text-end">
                                                    <button type="submit" class="btn btn-warning me-md-3" @onclick="AddMedicalCondition"><i class="fa-solid fa-notes-medical"></i> Add Another Medical Condition</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Do you (or your parent/guardian) believe any medical conditions you have (if any) require a risk assessment to be completed? If you have none then please select No</label>
                                </div>
                                <div class="col-md-8">
                                    <CustomBoolInputSelect @bind-Value="medicalInformation!.RequiresRiskAssesment" class="form-select d-none">
                                        <option value="">-- Please Select --</option>
                                        <option value="true">Yes</option>
                                        <option value="false">No</option>
                                    </CustomBoolInputSelect>
                                    <div class="d-grid gap-2 d-md-block">
                                        <button type="button" class="btn @(medicalInformation!.RequiresRiskAssesment == true? "btn-primary" : "btn-outline-primary") YesNoButton me-md-3" @onclick="() => RequiresRiskAssesmentToggle(true)"><i class="fa-solid fa-square-check"></i> Yes</button>
                                        <button type="button" class="btn @(medicalInformation!.RequiresRiskAssesment == false? "btn-secondary" : "btn-outline-secondary") YesNoButton" @onclick="() => RequiresRiskAssesmentToggle(false)"><i class="fa-solid fa-square-xmark"></i> No</button>
                                    </div>
                                    <ValidationMessage For="@(() => medicalInformation!.RequiresRiskAssesment)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Have you been hospitalised for any reason in the last year?</label>
                                </div>
                                <div class="col-md-8">
                                    <CustomBoolInputSelect @bind-Value="medicalInformation!.HasBeenHospitalisedInLastYear" class="form-select d-none">
                                        <option value="">-- Please Select --</option>
                                        <option value="true">Yes</option>
                                        <option value="false">No</option>
                                    </CustomBoolInputSelect>
                                    <div class="d-grid gap-2 d-md-block">
                                        <button type="button" class="btn @(medicalInformation!.HasBeenHospitalisedInLastYear == true? "btn-primary" : "btn-outline-primary") YesNoButton me-md-3" @onclick="() => HasBeenHospitalisedInLastYearToggle(true)"><i class="fa-solid fa-square-check"></i> Yes</button>
                                        <button type="button" class="btn @(medicalInformation!.HasBeenHospitalisedInLastYear == false? "btn-secondary" : "btn-outline-secondary") YesNoButton" @onclick="() => HasBeenHospitalisedInLastYearToggle(false)"><i class="fa-solid fa-square-xmark"></i> No</button>
                                    </div>
                                    <ValidationMessage For="@(() => medicalInformation!.HasBeenHospitalisedInLastYear)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label"><i class="fa-solid fa-note-sticky"></i> If yes please give details:</label>
                                </div>
                                <div class="col-md-8">
                                    <InputTextArea @bind-Value="medicalInformation!.HospitalisationNotes" class="form-control" />
                                    <ValidationMessage For="@(() => medicalInformation!.HospitalisationNotes)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <i class="fa-solid fa-angles-right"></i> <label class="col-form-label">Do you require any learning support?</label>
                                </div>
                                <div class="col-md-8">
                                    <CustomBoolInputSelect @bind-Value="medicalInformation!.RequiresLearningSupport" class="form-select d-none">
                                        <option value="">-- Please Select --</option>
                                        <option value="true">Yes</option>
                                        <option value="false">No</option>
                                    </CustomBoolInputSelect>
                                    <div class="d-grid gap-2 d-md-block">
                                        <button type="button" class="btn @(medicalInformation!.RequiresLearningSupport == true? "btn-primary" : "btn-outline-primary") YesNoButton me-md-3" @onclick="() => RequiresLearningSupportToggle(true)"><i class="fa-solid fa-square-check"></i> Yes</button>
                                        <button type="button" class="btn @(medicalInformation!.RequiresLearningSupport == false? "btn-secondary" : "btn-outline-secondary") YesNoButton" @onclick="() => RequiresLearningSupportToggle(false)"><i class="fa-solid fa-square-xmark"></i> No</button>
                                    </div>
                                    <ValidationMessage For="@(() => medicalInformation!.RequiresLearningSupport)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Do you have an EHCP (Educational Health Care Plan)</label>
                                    <div class="text-body-secondary">
                                        If <strong>YES</strong> your application is put on hold until we have received all relevant information to
                                        access the support needed. You will still need to obtain the required entrance qualifications for your study
                                        programme irrespective of support needs
                                    </div>
                                </div>
                                <div class="col-md-8">
                                    <CustomBoolInputSelect @bind-Value="medicalInformation!.HasEHCP" class="form-select d-none">
                                        <option value="">-- Please Select --</option>
                                        <option value="true">Yes</option>
                                        <option value="false">No</option>
                                    </CustomBoolInputSelect>
                                    <div class="d-grid gap-2 d-md-block">
                                        <button type="button" class="btn @(medicalInformation!.HasEHCP == true? "btn-primary" : "btn-outline-primary") YesNoButton me-md-3" @onclick="() => HasEHCPToggle(true)"><i class="fa-solid fa-square-check"></i> Yes</button>
                                        <button type="button" class="btn @(medicalInformation!.HasEHCP == false? "btn-secondary" : "btn-outline-secondary") YesNoButton" @onclick="() => HasEHCPToggle(false)"><i class="fa-solid fa-square-xmark"></i> No</button>
                                    </div>
                                    <ValidationMessage For="@(() => medicalInformation!.HasEHCP)" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="bd-callout bd-callout-SHCG-blue bd-callout-grey WhiteBackground">
                <div class="container">
                    <div class="row">
                        <div class="col-md">
                            <div class="row mb-3 align-items-center">
                                <div class="col-md text-center">
                                    <h4>Difficulties and Disabilities</h4>
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Do you have any difficulties and/or disabilities?</label>
                                </div>
                                <div class="col-md-8">
                                    <CustomBoolInputSelect @bind-Value="medicalInformation!.HasDifficultyDisability" class="form-select d-none">
                                        <option value="">-- Please Select --</option>
                                        <option value="true">Yes</option>
                                        <option value="false">No</option>
                                    </CustomBoolInputSelect>
                                    <div class="d-grid gap-2 d-md-block">
                                        <button type="button" class="btn @(medicalInformation!.HasDifficultyDisability == true? "btn-primary" : "btn-outline-primary") YesNoButton me-md-3" @onclick="() => HasDifficultyDisabilityToggle(true)"><i class="fa-solid fa-square-check"></i> Yes</button>
                                        <button type="button" class="btn @(medicalInformation!.HasDifficultyDisability == false? "btn-secondary" : "btn-outline-secondary") YesNoButton" @onclick="() => HasDifficultyDisabilityToggle(false)"><i class="fa-solid fa-square-xmark"></i> No</button>
                                    </div>
                                    <ValidationMessage For="@(() => medicalInformation!.HasDifficultyDisability)" />
                                </div>
                            </div>

                            @* Difficulties/Disabilities List *@

                            @if (medicalInformation?.DifficultiesDisabilities != null)
                            {
                                int? difficultyDisabilityRow = 0;
                                <div class="alert alert-warning" role="alert">
                                    <h4 class="alert-heading"><i class="fa-brands fa-accessible-icon"></i> Difficulties/Disabilities</h4>

                                    <datalist class="col-4" id="DifficultiesDisabilitiesList">
                                        @if (DisabilityCategories != null)
                                        {
                                            @foreach (var option in DisabilityCategories)
                                            {
                                                <option value="@option.Code">@option.Description</option>
                                            }
                                        }
                                    </datalist>

                                    @foreach (var difficultyDisability in medicalInformation!.DifficultiesDisabilities)
                                    {
                                        difficultyDisabilityRow++;

                                        <div class="row g-3 mb-3">
                                            <div class="col-md">
                                                <div class="card">
                                                    <div class="card-body">

                                                        <div class="row g-3 mb-3">
                                                            <div class="col-md-4">
                                                                <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Difficulties/Disabilities</label>
                                                            </div>
                                                            <div class="col-md-8">
                                                                <InputNumber @bind-Value="difficultyDisability!.DisabilityCategoryID" class="form-control" list="DifficultiesDisabilitiesList" />
                                                                <ValidationMessage For="@(() => difficultyDisability!.DisabilityCategoryID)" />
                                                            </div>
                                                        </div>

                                                        <div class="row g-3 mb-3">
                                                            <div class="col-md-4">
                                                                <label class="col-form-label"><i class="fa-solid fa-note-sticky"></i> Notes</label>
                                                            </div>
                                                            <div class="col-md-8">
                                                                <InputTextArea @bind-Value="difficultyDisability!.Notes" class="form-control" />
                                                                <ValidationMessage For="@(() => difficultyDisability!.Notes)" />
                                                            </div>
                                                        </div>

                                                        @{bool isPrimary = difficultyDisability!.IsPrimary ?? false;}
                                                        <div class="row g-3 mb-3">
                                                            <div class="col-md-4">
                                                                <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Is Primary</label>
                                                            </div>
                                                            <div class="col-md-8">
                                                                <InputCheckbox @bind-Value="isPrimary" class="form-control" />
                                                                <ValidationMessage For="@(() => isPrimary)" />
                                                            </div>
                                                        </div>

                                                        <div class="row g-3 mb-3">
                                                            <div class="col-md">
                                                                <div class="d-grid gap-2 d-md-block text-end">
                                                                    <button type="button" class="btn btn-danger" @onclick="() => RemoveDifficultyDisabilityConfirm(difficultyDisability?.MedicalInformationDifficultyDisabilityID ?? 0)"><i class="fa-solid fa-rectangle-xmark"></i> Remove This Difficulty/Disability</button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }

                                    <div class="alert alert-secondary" role="alert">
                                        <div class="row">
                                            <div class="col-md">
                                                <div class="d-grid gap-2 d-md-block text-end">
                                                    <button type="submit" class="btn btn-warning me-md-3" @onclick="AddDifficultyDisability"><i class="fa-brands fa-accessible-icon"></i> Add Another Difficulty/Disability</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }

                        </div>
                    </div>
                </div>
            </div>

            <div class="bd-callout bd-callout-SHCG-yellow bd-callout-grey WhiteBackground">
                <div class="container">
                    <div class="row">
                        <div class="col-md">
                            <div class="row mb-3 align-items-center">
                                <div class="col-md text-center">
                                    <h4>Home Situation and Support at School</h4>
                                </div>
                            </div>
                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Are you currently a Looked After Child?*</label>
                                    <div class="text-body-secondary">*A child in care under the local authority.</div>
                                </div>
                                <div class="col-md-8">
                                    <CustomBoolInputSelect @bind-Value="medicalInformation!.IsLAC" class="form-select d-none">
                                        <option value="">-- Please Select --</option>
                                        <option value="true">Yes</option>
                                        <option value="false">No</option>
                                    </CustomBoolInputSelect>
                                    <div class="d-grid gap-2 d-md-block">
                                        <button type="button" class="btn @(medicalInformation!.IsLAC == true? "btn-primary" : "btn-outline-primary") YesNoButton me-md-3" @onclick="() => IsLACToggle(true)"><i class="fa-solid fa-square-check"></i> Yes</button>
                                        <button type="button" class="btn @(medicalInformation!.IsLAC == false? "btn-secondary" : "btn-outline-secondary") YesNoButton" @onclick="() => IsLACToggle(false)"><i class="fa-solid fa-square-xmark"></i> No</button>
                                    </div>
                                    <ValidationMessage For="@(() => medicalInformation!.IsLAC)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Are you a Care Leaver?*</label>
                                    <div class="text-body-secondary">
                                        *A child previously in care under the local authority.
                                    </div>
                                </div>
                                <div class="col-md-8">
                                    <CustomBoolInputSelect @bind-Value="medicalInformation!.IsCareLeaver" class="form-select d-none">
                                        <option value="">-- Please Select --</option>
                                        <option value="true">Yes</option>
                                        <option value="false">No</option>
                                    </CustomBoolInputSelect>
                                    <div class="d-grid gap-2 d-md-block">
                                        <button type="button" class="btn @(medicalInformation!.IsCareLeaver == true? "btn-primary" : "btn-outline-primary") YesNoButton me-md-3" @onclick="() => IsCareLeaverToggle(true)"><i class="fa-solid fa-square-check"></i> Yes</button>
                                        <button type="button" class="btn @(medicalInformation!.IsCareLeaver == false? "btn-secondary" : "btn-outline-secondary") YesNoButton" @onclick="() => IsCareLeaverToggle(false)"><i class="fa-solid fa-square-xmark"></i> No</button>
                                    </div>
                                    <ValidationMessage For="@(() => medicalInformation!.IsCareLeaver)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Are you currently entitled to free school meals?</label>
                                </div>
                                <div class="col-md-8">
                                    <CustomBoolInputSelect @bind-Value="medicalInformation!.HasFSM" class="form-select d-none">
                                        <option value="">-- Please Select --</option>
                                        <option value="true">Yes</option>
                                        <option value="false">No</option>
                                    </CustomBoolInputSelect>
                                    <div class="d-grid gap-2 d-md-block">
                                        <button type="button" class="btn @(medicalInformation!.HasFSM == true? "btn-primary" : "btn-outline-primary") YesNoButton me-md-3" @onclick="() => HasFSMToggle(true)"><i class="fa-solid fa-square-check"></i> Yes</button>
                                        <button type="button" class="btn @(medicalInformation!.HasFSM == false? "btn-secondary" : "btn-outline-secondary") YesNoButton" @onclick="() => HasFSMToggle(false)"><i class="fa-solid fa-square-xmark"></i> No</button>
                                    </div>
                                    <ValidationMessage For="@(() => medicalInformation!.HasFSM)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Are you from a Military Service Family?</label>
                                </div>
                                <div class="col-md-8">
                                    <CustomBoolInputSelect @bind-Value="medicalInformation!.IsFromMilitaryServiceFamily" class="form-select d-none">
                                        <option value="">-- Please Select --</option>
                                        <option value="true">Yes</option>
                                        <option value="false">No</option>
                                    </CustomBoolInputSelect>
                                    <div class="d-grid gap-2 d-md-block">
                                        <button type="button" class="btn @(medicalInformation!.IsFromMilitaryServiceFamily == true? "btn-primary" : "btn-outline-primary") YesNoButton me-md-3" @onclick="() => IsFromMilitaryServiceFamilyToggle(true)"><i class="fa-solid fa-square-check"></i> Yes</button>
                                        <button type="button" class="btn @(medicalInformation!.IsFromMilitaryServiceFamily == false? "btn-secondary" : "btn-outline-secondary") YesNoButton" @onclick="() => IsFromMilitaryServiceFamilyToggle(false)"><i class="fa-solid fa-square-xmark"></i> No</button>
                                    </div>
                                    <ValidationMessage For="@(() => medicalInformation!.IsFromMilitaryServiceFamily)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label">
                                        <i class="fa-solid fa-angles-right"></i> Have you had any access arrangements for
                                        your exams in the past?
                                    </label>
                                </div>
                                <div class="col-md-8">
                                    <CustomBoolInputSelect @bind-Value="medicalInformation!.HasAccessArrangements" class="form-select d-none">
                                        <option value="">-- Please Select --</option>
                                        <option value="true">Yes</option>
                                        <option value="false">No</option>
                                    </CustomBoolInputSelect>
                                    <div class="d-grid gap-2 d-md-block">
                                        <button type="button" class="btn @(medicalInformation!.HasAccessArrangements == true? "btn-primary" : "btn-outline-primary") YesNoButton me-md-3" @onclick="() => HasAccessArrangementsToggle(true)"><i class="fa-solid fa-square-check"></i> Yes</button>
                                        <button type="button" class="btn @(medicalInformation!.HasAccessArrangements == false? "btn-secondary" : "btn-outline-secondary") YesNoButton" @onclick="() => HasAccessArrangementsToggle(false)"><i class="fa-solid fa-square-xmark"></i> No</button>
                                    </div>
                                    <ValidationMessage For="@(() => medicalInformation!.HasAccessArrangements)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label"><i class="fa-solid fa-note-sticky"></i> If yes please give details:</label>
                                </div>
                                <div class="col-md-8">
                                    <InputTextArea @bind-Value="medicalInformation!.AccessRequirementDetails" class="form-control" />
                                    <ValidationMessage For="@(() => medicalInformation!.AccessRequirementDetails)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label">
                                        <i class="fa-solid fa-note-sticky"></i> What type of support do you
                                        currently have at school/college?
                                    </label>
                                </div>
                                <div class="col-md-8">
                                    <InputTextArea @bind-Value="medicalInformation!.SupportInPlaceAtPriorSchoolOrCollege" class="form-control" />
                                    <ValidationMessage For="@(() => medicalInformation!.SupportInPlaceAtPriorSchoolOrCollege)" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="bd-callout bd-callout-SHCG-teal bd-callout-grey WhiteBackground">
                <div class="container">
                    <div class="row">
                        <div class="col-md">
                            <div class="row mb-3 align-items-center">
                                <div class="col-md text-center">
                                    <h4>Consents and Delarations</h4>
                                </div>
                            </div>
                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label">
                                        <i class="fa-solid fa-angles-right"></i> Can we contact your school/college/other for details of your learning
                                        difficulties/disabilities (if any) and obtain copies of any relevant documents? If you have none then please select No.
                                    </label>
                                    <div class="text-body-secondary">
                                        Please note that if we are not allowed to obtain information about your learning
                                        difficulties it may not be possible to support you appropriately.
                                    </div>
                                </div>
                                <div class="col-md-8">
                                    <CustomBoolInputSelect @bind-Value="medicalInformation!.CanContactPriorSchoolOrCollege" class="form-select d-none">
                                        <option value="">-- Please Select --</option>
                                        <option value="true">Yes</option>
                                        <option value="false">No</option>
                                    </CustomBoolInputSelect>
                                    <div class="d-grid gap-2 d-md-block">
                                        <button type="button" class="btn @(medicalInformation!.CanContactPriorSchoolOrCollege == true? "btn-primary" : "btn-outline-primary") YesNoButton me-md-3" @onclick="() => CanContactPriorSchoolOrCollegeToggle(true)"><i class="fa-solid fa-square-check"></i> Yes</button>
                                        <button type="button" class="btn @(medicalInformation!.CanContactPriorSchoolOrCollege == false? "btn-secondary" : "btn-outline-secondary") YesNoButton" @onclick="() => CanContactPriorSchoolOrCollegeToggle(false)"><i class="fa-solid fa-square-xmark"></i> No</button>
                                    </div>
                                    <ValidationMessage For="@(() => medicalInformation!.CanContactPriorSchoolOrCollege)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label">
                                        <i class="fa-solid fa-angles-right"></i> Do you have any ongoing
                                        criminal investigations or
                                        convictions?
                                    </label>
                                </div>
                                <div class="col-md-8">
                                    <CustomBoolInputSelect @bind-Value="medicalInformation!.HasCriminalConvictions" class="form-select d-none">
                                        <option value="">-- Please Select --</option>
                                        <option value="true">Yes</option>
                                        <option value="false">No</option>
                                    </CustomBoolInputSelect>
                                    <div class="d-grid gap-2 d-md-block">
                                        <button type="button" class="btn @(medicalInformation!.HasCriminalConvictions == true? "btn-primary" : "btn-outline-primary") YesNoButton me-md-3" @onclick="() => HasCriminalConvictionsToggle(true)"><i class="fa-solid fa-square-check"></i> Yes</button>
                                        <button type="button" class="btn @(medicalInformation!.HasCriminalConvictions == false? "btn-secondary" : "btn-outline-secondary") YesNoButton" @onclick="() => HasCriminalConvictionsToggle(false)"><i class="fa-solid fa-square-xmark"></i> No</button>
                                    </div>
                                    <ValidationMessage For="@(() => medicalInformation!.HasCriminalConvictions)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label"><i class="fa-solid fa-note-sticky"></i> If yes please give details:</label>
                                </div>
                                <div class="col-md-8">
                                    <InputTextArea @bind-Value="medicalInformation!.CriminalConvictionDetails" class="form-control" />
                                    <ValidationMessage For="@(() => medicalInformation!.CriminalConvictionDetails)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label">
                                        <i class="fa-solid fa-angles-right"></i> For Apprenticeships; I consent to the sharing of my information with potential employers as part of the recruitment process
                                    </label>
                                </div>
                                <div class="col-md-8">
                                    <CustomBoolInputSelect @bind-Value="medicalInformation!.CanShareInformationWithPotentialEmployers" class="form-select d-none">
                                        <option value="">-- Please Select --</option>
                                        <option value="true">Yes</option>
                                        <option value="false">No</option>
                                    </CustomBoolInputSelect>
                                    <div class="d-grid gap-2 d-md-block">
                                        <button type="button" class="btn @(medicalInformation!.CanShareInformationWithPotentialEmployers == true? "btn-primary" : "btn-outline-primary") YesNoButton me-md-3" @onclick="() => CanShareInformationWithPotentialEmployersToggle(true)"><i class="fa-solid fa-square-check"></i> Yes</button>
                                        <button type="button" class="btn @(medicalInformation!.CanShareInformationWithPotentialEmployers == false? "btn-secondary" : "btn-outline-secondary") YesNoButton" @onclick="() => CanShareInformationWithPotentialEmployersToggle(false)"><i class="fa-solid fa-square-xmark"></i> No</button>
                                    </div>
                                    <ValidationMessage For="@(() => medicalInformation!.CanShareInformationWithPotentialEmployers)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Do you agree all the information provided is correct to the best of your knowledge?</label>
                                </div>
                                <div class="col-md-8">
                                    <CustomBoolInputSelect @bind-Value="medicalInformation!.AgreeInfoIsCorrect" class="form-select d-none">
                                        <option value="">-- Please Select --</option>
                                        <option value="true">Yes</option>
                                        <option value="false">No</option>
                                    </CustomBoolInputSelect>
                                    <div class="d-grid gap-2 d-md-block">
                                        <button type="button" class="btn @(medicalInformation!.AgreeInfoIsCorrect == true? "btn-primary" : "btn-outline-primary") YesNoButton me-md-3" @onclick="() => AgreeInfoIsCorrectToggle(true)"><i class="fa-solid fa-square-check"></i> Yes</button>
                                        <button type="button" class="btn @(medicalInformation!.AgreeInfoIsCorrect == false? "btn-secondary" : "btn-outline-secondary") YesNoButton" @onclick="() => AgreeInfoIsCorrectToggle(false)"><i class="fa-solid fa-square-xmark"></i> No</button>
                                    </div>
                                    <ValidationMessage For="@(() => medicalInformation!.AgreeInfoIsCorrect)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label"><i class="fa-solid fa-file-contract"></i> If you are 18 or over please sign here:</label>
                                </div>
                                <div class="col-md-8">
                                    <InputText @bind-Value="medicalInformation!.SignedStudent" class="form-control" />
                                    <ValidationMessage For="@(() => medicalInformation!.SignedStudent)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label"><i class="fa-regular fa-calendar-days"></i> Date</label>
                                </div>
                                <div class="col-md-8">
                                    <InputDate @bind-Value="medicalInformation!.SignedStudentDate" class="form-control" />
                                    <ValidationMessage For="@(() => medicalInformation!.SignedStudentDate)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label"><i class="fa-solid fa-file-contract"></i> If you are <strong>under</strong> 18 at the start of your course, parent/carer please sign here:</label>
                                </div>
                                <div class="col-md-8">
                                    <InputText @bind-Value="medicalInformation!.SignedParentCarer" class="form-control" />
                                    <ValidationMessage For="@(() => medicalInformation!.SignedParentCarer)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label"><i class="fa-regular fa-calendar-days"></i> Date</label>
                                </div>
                                <div class="col-md-8">
                                    <InputDate @bind-Value="medicalInformation!.SignedParentCarerDate" class="form-control" />
                                    <ValidationMessage For="@(() => medicalInformation!.SignedParentCarerDate)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Has Given Trip Consent Student</label>
                                </div>
                                <div class="col-md-8">
                                    <CustomBoolInputSelect @bind-Value="medicalInformation!.HasGivenTripConsentStudent" class="form-select d-none">
                                        <option value="">-- Please Select --</option>
                                        <option value="true">Yes</option>
                                        <option value="false">No</option>
                                    </CustomBoolInputSelect>
                                    <div class="d-grid gap-2 d-md-block">
                                        <button type="button" class="btn @(medicalInformation!.HasGivenTripConsentStudent == true? "btn-primary" : "btn-outline-primary") YesNoButton me-md-3" @onclick="() => HasGivenTripConsentStudentToggle(true)"><i class="fa-solid fa-square-check"></i> Yes</button>
                                        <button type="button" class="btn @(medicalInformation!.HasGivenTripConsentStudent == false? "btn-secondary" : "btn-outline-secondary") YesNoButton" @onclick="() => HasGivenTripConsentStudentToggle(false)"><i class="fa-solid fa-square-xmark"></i> No</button>
                                    </div>
                                    <ValidationMessage For="@(() => medicalInformation!.HasGivenTripConsentStudent)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Has Given Trip Consent Parent/Carer</label>
                                </div>
                                <div class="col-md-8">
                                    <CustomBoolInputSelect @bind-Value="medicalInformation!.HasGivenTripConsentParentCarer" class="form-select d-none">
                                        <option value="">-- Please Select --</option>
                                        <option value="true">Yes</option>
                                        <option value="false">No</option>
                                    </CustomBoolInputSelect>
                                    <div class="d-grid gap-2 d-md-block">
                                        <button type="button" class="btn @(medicalInformation!.HasGivenTripConsentParentCarer == true? "btn-primary" : "btn-outline-primary") YesNoButton me-md-3" @onclick="() => HasGivenTripConsentParentCarerToggle(true)"><i class="fa-solid fa-square-check"></i> Yes</button>
                                        <button type="button" class="btn @(medicalInformation!.HasGivenTripConsentParentCarer == false? "btn-secondary" : "btn-outline-secondary") YesNoButton" @onclick="() => HasGivenTripConsentParentCarerToggle(false)"><i class="fa-solid fa-square-xmark"></i> No</button>
                                    </div>
                                    <ValidationMessage For="@(() => medicalInformation!.HasGivenTripConsentParentCarer)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Has Given Photographic Images Consent</label>
                                </div>
                                <div class="col-md-8">
                                    <CustomBoolInputSelect @bind-Value="medicalInformation!.HasGivenPhotographicImagesConsent" class="form-select d-none">
                                        <option value="">-- Please Select --</option>
                                        <option value="true">Yes</option>
                                        <option value="false">No</option>
                                    </CustomBoolInputSelect>
                                    <div class="d-grid gap-2 d-md-block">
                                        <button type="button" class="btn @(medicalInformation!.HasGivenPhotographicImagesConsent == true? "btn-primary" : "btn-outline-primary") YesNoButton me-md-3" @onclick="() => HasGivenPhotographicImagesConsentToggle(true)"><i class="fa-solid fa-square-check"></i> Yes</button>
                                        <button type="button" class="btn @(medicalInformation!.HasGivenPhotographicImagesConsent == false? "btn-secondary" : "btn-outline-secondary") YesNoButton" @onclick="() => HasGivenPhotographicImagesConsentToggle(false)"><i class="fa-solid fa-square-xmark"></i> No</button>
                                    </div>
                                    <ValidationMessage For="@(() => medicalInformation!.HasGivenPhotographicImagesConsent)" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="alert alert-secondary" role="alert">
                <div class="row">
                    <div class="col-md">
                        <div class="d-grid gap-2 d-md-block text-center">
                            <button type="submit" class="btn btn-success me-md-3"><i class="fa-solid fa-paper-plane"></i> Submit</button>
                            <button type="button" class="btn btn-warning" @onclick="ClearFormConfirm"><i class="fa-solid fa-eraser"></i> Clear</button>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    }
</div>

@code {
    [Parameter]
    public string? StudentGUID { get; set; }

    bool formSubmitted = false;

    //Hide navbar in layout component
    [CascadingParameter]
    public MainLayout? Layout { get; set; }

    protected override void OnInitialized()
    {
        if (Layout != null) {
            Layout.HideNav();
        }
    }

    public int? medicalConditionID { get; set; }
    public int? difficultyDisabilityID { get; set; }
    public string? action { get; set; }

    private Modal? modalInfo { get; set; }
    public string? msgInfoTitle = null;
    public MarkupString? msgInfo = null;

    private Modal? modalError { get; set; }
    public string? msgErrorTitle = null;
    public MarkupString? msgError = null;
    public string? msgErrorStackTrace = null;

    private Modal? modalConfirm { get; set; }
    public string? msgConfirmTitle = null;
    public MarkupString? msgConfirm = null;

    [SupplyParameterFromForm]
    public MedicalInformationModel? medicalInformation { get; set; }
    public List<MedicalInformationEmergencyContactModel>? emergencyContacts { get; set; }
    public List<MedicalInformationMedicalConditionModel>? medicalConditions { get; set; }
    public List<MedicalInformationDifficultyDisabilityModel>? difficultiesDisabilities { get; set; }

    private FluentValidationValidator? _fluentValidationValidator;

    public string? loadDataErrorMsg = null;

    private StudentModel? student;
    private string? studentEndPoint;

    private string? submitEndPoint;

    protected override async Task OnInitializedAsync()
    {
        studentEndPoint = $"{configuration["APIEndpoint"]}/Student/{StudentGUID}";
        try
        {
            student = await Http.GetFromJsonAsync<StudentModel>(studentEndPoint);
        }
        catch (HttpRequestException ex)
        {
            HandleJsonException(ex, "GUID");
        }

        //Create objects to hold form entries
        CreateNewObjects();

        //Populate Drop-Downs
        await LoadDisabilityCategories();
        await LoadMedicalConditionTypes();
        await LoadTitles();
        await LoadRelationships();
    }

    public void CreateNewObjects() 
    {
        //Main Model
        //medicalInformation ??= new();
        medicalInformation = CreateNewMedicalInformation();

        //Create 2 emergency contacts
        //emergencyContacts ??= new();
        emergencyContacts = new List<MedicalInformationEmergencyContactModel>();
        emergencyContacts?.Add(CreateNewEmergencyContact());
        emergencyContacts?.Add(CreateNewEmergencyContact());

        //Add emergency contacts to main model
        medicalInformation.EmergencyContacts ??= emergencyContacts;
    }

    private MedicalInformationModel CreateNewMedicalInformation()
    {
        MedicalInformationModel newMedical = new MedicalInformationModel();
        newMedical.CreatedBy = student?.Email;
        newMedical.CreatedDate = DateTime.Now;
        newMedical.StudentDetailID = student?.StudentDetailID;
        newMedical.AcademicYearID = student?.AcademicYearID;
        newMedical.StudentRef = student?.StudentRef;

        return newMedical;
    }

    private MedicalInformationEmergencyContactModel CreateNewEmergencyContact()
    {
        MedicalInformationEmergencyContactModel newEmergencyContact = new MedicalInformationEmergencyContactModel();
        newEmergencyContact.MedicalInformationEmergencyContactID = medicalInformation?.EmergencyContacts?.Count + 1 ?? 1;
        newEmergencyContact.ContactOrder = medicalInformation?.EmergencyContacts?.Count + 1 ?? 1;

        return newEmergencyContact;
    }

    private MedicalInformationMedicalConditionModel CreateNewMedicalCondition()
    {
        MedicalInformationMedicalConditionModel newMedicalCondition = new MedicalInformationMedicalConditionModel();
        newMedicalCondition.MedicalInformationMedicalConditionID = medicalInformation?.MedicalConditions?.Count + 1 ?? 1;

        return newMedicalCondition;
    }

    private MedicalInformationDifficultyDisabilityModel CreateNewDifficultyDisability()
    {
        MedicalInformationDifficultyDisabilityModel newDifficultyDisability = new MedicalInformationDifficultyDisabilityModel();
        newDifficultyDisability.MedicalInformationDifficultyDisabilityID = medicalInformation?.DifficultiesDisabilities?.Count + 1 ?? 1;

        return newDifficultyDisability;
    }

    private void FormAction() {
        //Determine what clear form button should do on dialog box

        if (action == "ClearFormConfirm") {
            ClearForm();
        }
        else if (action == "RemoveMedicalConditionConfirm")
        {
            RemoveMedicalCondition();
        }
        else if (action == "RemoveAllMedicalConditionsConfirm")
        {
            RemoveAllMedicalConditions();
        }
        else if (action == "RemoveDifficultyDisabilityConfirm")
        {
            RemoveDifficultyDisability();
        }
        else if (action == "RemoveAllDifficultiesDisabilitiesConfirm")
        {
            RemoveAllDifficultiesDisabilities();
        }
        else {
            action = "Error";

            msgErrorTitle = $"Invalid Action";
            msgError = (MarkupString)$"An invalid option was specified. Please try again.";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    private void ClearFormConfirm()
    {
        action = "ClearFormConfirm";

        msgConfirmTitle = $"Clear Form?";
        msgConfirm = (MarkupString)$"Are you sure you want to clear all information on this form?";

        modalConfirm!.Open();
    }

    private void ClearForm()
    {
        action = "ClearForm";

        CreateNewObjects();

        modalConfirm!.Close();
    }

    private async Task SubmitForm()
    {
        if (await _fluentValidationValidator!.ValidateAsync())
        {
            formSubmitted = true;
            Logger.LogInformation("Id = {Id}", medicalInformation?.MedicalInformationID);

            submitEndPoint = $"{configuration["APIEndpoint"]}/MedicalInformation";
            try
            {
                if (medicalInformation != null)
                {
                    //Clear out IDs set earlier as database will set these
                    foreach (var contact in medicalInformation?.EmergencyContacts!)
                    {
                        contact.MedicalInformationEmergencyContactID = 0;
                    }
                    foreach (var contact in medicalInformation?.MedicalConditions!)
                    {
                        contact.MedicalInformationMedicalConditionID = 0;
                    }
                    foreach (var contact in medicalInformation?.DifficultiesDisabilities!)
                    {
                        contact.MedicalInformationDifficultyDisabilityID = 0;
                    }

                    HttpResponseMessage formResponse = await Http.PostAsJsonAsync<MedicalInformationModel>(submitEndPoint, medicalInformation);

                    if (formResponse.IsSuccessStatusCode != true)
                    {
                        string responseBody = await formResponse.Content.ReadAsStringAsync();
                        action = "Error";

                        msgErrorTitle = $"Cannot Submit Form";
                        msgError = (MarkupString)$"Unfortunately the form could not be submitted successfully due to an error.<br />Please check your network connection and attempt to submit again.";
                        msgErrorStackTrace = responseBody;

                        modalError!.Open();
                    }
                }
                else
                {
                    action = "Error";

                    msgErrorTitle = $"Cannot Submit Form";
                    msgError = (MarkupString)$"Unfortunately the form could not be submitted successfully due to an error.<br />Please try again.";
                    msgErrorStackTrace = null;

                    modalError!.Open();
                }

            }
            catch (HttpRequestException ex)
            {
                HandleJsonException(ex, "GUID");
            }
        }
    }

    private void GoToSHCGHomepage() {
        NavManager.NavigateTo("https://www.shcg.ac.uk");
    }

    //Functions to update drop down on button press
    public void HasMedicalConditionToggle(bool? trueOrFalse) 
    {
        if (trueOrFalse == true) 
        {
            medicalInformation!.HasMedicalCondition = trueOrFalse;
            AddMedicalCondition();
        }
        else {
            RemoveAllMedicalConditionsConfirm();
        }
    }
    public void RequiresRiskAssesmentToggle(bool? trueOrFalse) => medicalInformation!.RequiresRiskAssesment = trueOrFalse;
    public void HasBeenHospitalisedInLastYearToggle(bool? trueOrFalse) => medicalInformation!.HasBeenHospitalisedInLastYear = trueOrFalse;
    public void RequiresLearningSupportToggle(bool? trueOrFalse) => medicalInformation!.RequiresLearningSupport = trueOrFalse;
    public void HasEHCPToggle(bool? trueOrFalse) => medicalInformation!.HasEHCP = trueOrFalse;
    public void HasDifficultyDisabilityToggle(bool? trueOrFalse)
    {
        medicalInformation!.HasDifficultyDisability = trueOrFalse;

        if (trueOrFalse == true)
        {
            AddDifficultyDisability();
        }
        else
        {
            RemoveAllDifficultiesDisabilitiesConfirm();
        }
    }
    public void IsLACToggle(bool? trueOrFalse) => medicalInformation!.IsLAC = trueOrFalse;
    public void IsCareLeaverToggle(bool? trueOrFalse) => medicalInformation!.IsCareLeaver = trueOrFalse;
    public void HasFSMToggle(bool? trueOrFalse) => medicalInformation!.HasFSM = trueOrFalse;
    public void IsFromMilitaryServiceFamilyToggle(bool? trueOrFalse) => medicalInformation!.IsFromMilitaryServiceFamily = trueOrFalse;
    public void HasAccessArrangementsToggle(bool? trueOrFalse) => medicalInformation!.HasAccessArrangements = trueOrFalse;
    public void CanContactPriorSchoolOrCollegeToggle(bool? trueOrFalse) => medicalInformation!.CanContactPriorSchoolOrCollege = trueOrFalse;
    public void HasCriminalConvictionsToggle(bool? trueOrFalse) => medicalInformation!.HasCriminalConvictions = trueOrFalse;
    public void CanShareInformationWithPotentialEmployersToggle(bool? trueOrFalse) => medicalInformation!.CanShareInformationWithPotentialEmployers = trueOrFalse;
    public void AgreeInfoIsCorrectToggle(bool? trueOrFalse) => medicalInformation!.AgreeInfoIsCorrect = trueOrFalse;
    public void HasGivenTripConsentStudentToggle(bool? trueOrFalse) => medicalInformation!.HasGivenTripConsentStudent = trueOrFalse;
    public void HasGivenTripConsentParentCarerToggle(bool? trueOrFalse) => medicalInformation!.HasGivenTripConsentParentCarer = trueOrFalse;
    public void HasGivenPhotographicImagesConsentToggle(bool? trueOrFalse) => medicalInformation!.HasGivenPhotographicImagesConsent = trueOrFalse;

    //Medical condition actions
    public void AddMedicalCondition() 
    {
        medicalConditions ??= new();
        medicalConditions?.Add(CreateNewMedicalCondition());

        if (medicalInformation != null) {
            medicalInformation!.MedicalConditions ??= medicalConditions;
        }
    }

    private void RemoveMedicalConditionConfirm(int recordID)
    {
        medicalConditionID = recordID;
        action = "RemoveMedicalConditionConfirm";

        msgConfirmTitle = $"Remove Medical Condition?";
        msgConfirm = (MarkupString)$"Are you sure you want to remove this medical condition?";

        modalConfirm!.Open();
    }

    private void RemoveMedicalCondition()
    {
        action = "RemoveMedicalCondition";

        modalConfirm!.Close();

        if (medicalInformation?.MedicalConditions?.Count > 1)
        {
            var recordToDelete = medicalInformation.MedicalConditions?
                .Where(c => c.MedicalInformationMedicalConditionID == medicalConditionID).FirstOrDefault();

            if (recordToDelete != null)
            {
                medicalInformation.MedicalConditions?
                .Remove(recordToDelete);
            }
            else
            {
                action = "Error";

                msgErrorTitle = $"Cannot Remove This Medical Condition";
                msgError = (MarkupString)$"There was an error removing the medical condition. Please try again.";
                msgErrorStackTrace = null;

                modalError!.Open();
            }
        }
        else
        {
            action = "Error";

            msgErrorTitle = $"Cannot Remove Last Medical Condition";
            msgError = (MarkupString)$"This medical condition cannot be removed as you must send us details of at least one. If you do not have any please select No to the question above";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    private void RemoveAllMedicalConditionsConfirm()
    {
        action = "RemoveAllMedicalConditionsConfirm";

        msgConfirmTitle = $"Remove All Medical Conditions?";
        msgConfirm = (MarkupString)$"Setting this to no will clear the {medicalInformation?.MedicalConditions?.Count ?? 0} medical conditions entered below. Are you sure you wish to clear these?";

        modalConfirm!.Open();
    }

    private void RemoveAllMedicalConditions()
    {
        action = "RemoveAllMedicalConditions";

        medicalInformation!.HasMedicalCondition = false;
        medicalConditions = new List<MedicalInformationMedicalConditionModel>();

        modalConfirm!.Close();

        if (medicalInformation != null)
        {
            medicalInformation!.MedicalConditions = null;
        }
    }

    public void AddDifficultyDisability()
    {
        difficultiesDisabilities ??= new();
        difficultiesDisabilities?.Add(CreateNewDifficultyDisability());

        if (difficultiesDisabilities != null)
        {
            medicalInformation!.DifficultiesDisabilities ??= difficultiesDisabilities;
        }
    }

    private void RemoveDifficultyDisabilityConfirm(int recordID)
    {
        difficultyDisabilityID = recordID;
        action = "RemoveDifficultyDisabilityConfirm";

        msgConfirmTitle = $"Remove Difficulty/Disability?";
        msgConfirm = (MarkupString)$"Are you sure you want to remove this difficulty/disability?";

        modalConfirm!.Open();
    }

    private void RemoveDifficultyDisability()
    {
        action = "RemoveDifficultyDisability";

        modalConfirm!.Close();

        if (medicalInformation?.DifficultiesDisabilities?.Count > 1)
        {
            var recordToDelete = medicalInformation.DifficultiesDisabilities?
                .Where(d => d.MedicalInformationDifficultyDisabilityID == difficultyDisabilityID).FirstOrDefault();

            if (recordToDelete != null)
            {
                medicalInformation.DifficultiesDisabilities?
                .Remove(recordToDelete);
            }
            else
            {
                action = "Error";

                msgErrorTitle = $"Cannot Remove This Difficulty/Disability";
                msgError = (MarkupString)$"There was an error removing the difficulty/disability. Please try again.";
                msgErrorStackTrace = null;

                modalError!.Open();
            }
        }
        else
        {
            action = "Error";

            msgErrorTitle = $"Cannot Remove Last Difficulty/Disability";
            msgError = (MarkupString)$"This difficulty/disability cannot be removed as you must send us details of at least one. If you do not have any please select No to the question above";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    private void RemoveAllDifficultiesDisabilitiesConfirm()
    {
        action = "RemoveAllDifficultiesDisabilitiesConfirm";

        msgConfirmTitle = $"Remove All Difficulties/Disabilities?";
        msgConfirm = (MarkupString)$"Setting this to no will clear the {medicalInformation?.DifficultiesDisabilities?.Count ?? 0} difficulties/disabilities entered below. Are you sure you wish to clear these?";

        modalConfirm!.Open();
    }

    private void RemoveAllDifficultiesDisabilities()
    {
        action = "RemoveAllDifficultiesDisabilities";

        medicalInformation!.HasDifficultyDisability = false;
        difficultiesDisabilities = new List<MedicalInformationDifficultyDisabilityModel>();

        modalConfirm!.Close();

        if (medicalInformation != null)
        {
            medicalInformation!.DifficultiesDisabilities = null;
        }
    }

    //DropDowns
    // public List<DropDownModel> Titles { get; } = new List<DropDownModel>
    // {
    //     new DropDownModel { Code = "Mr", Description = "Mr" },
    //     new DropDownModel { Code = "Mrs", Description = "Mrs" },
    //     new DropDownModel { Code = "Miss", Description = "Miss" }
    // };

    //Values for drop-downs
    public static List<DropDownIntModel>? DisabilityCategories { get; private set; }
    public async Task LoadDisabilityCategories()
    {
        string endPoint = $"{configuration["APIEndpoint"]}/DisabilityCategory";
        try
        {
            DisabilityCategories = await Http.GetFromJsonAsync<List<DropDownIntModel>>(endPoint);
        }
        catch (HttpRequestException ex)
        {
            DisabilityCategories = new List<DropDownIntModel>();
            HandleJsonException(ex, "DisabilityCategory");
        }
    }
    public static List<DropDownIntModel> GetDisabilityCategories() => DisabilityCategories ?? new List<DropDownIntModel>();

    public static List<DropDownIntModel>? MedicalConditionTypes { get; private set; }
    public async Task LoadMedicalConditionTypes()
    {
        string endPoint = $"{configuration["APIEndpoint"]}/MedicalConditionType";
        try
        {
            MedicalConditionTypes = await Http.GetFromJsonAsync<List<DropDownIntModel>>(endPoint);
        }
        catch (HttpRequestException ex)
        {
            MedicalConditionTypes = new List<DropDownIntModel>();
            HandleJsonException(ex, "MedicalConditionType");
        }
    }
    public static List<DropDownIntModel> GetMedicalConditionTypes() => MedicalConditionTypes ?? new List<DropDownIntModel>();

    public static List<DropDownStringModel>? Titles { get; private set; }
    public async Task LoadTitles()
    {
        string endPoint = $"{configuration["APIEndpoint"]}/Title";
        try
        {
            Titles = await Http.GetFromJsonAsync<List<DropDownStringModel>>(endPoint);
        }
        catch (HttpRequestException ex)
        {
            Titles = new List<DropDownStringModel>();
            HandleJsonException(ex, "Title");
        }
    }
    public static List<DropDownStringModel> GetTitles() => Titles ?? new List<DropDownStringModel>();

    public static List<DropDownIntModel>? Relationships { get; private set; }
    public async Task LoadRelationships()
    {
        string endPoint = $"{configuration["APIEndpoint"]}/Relationship";
        try
        {
            Relationships = await Http.GetFromJsonAsync<List<DropDownIntModel>>(endPoint);
        }
        catch (HttpRequestException ex)
        {
            Relationships = new List<DropDownIntModel>();
            HandleJsonException(ex, "Relationship");
        }
    }
    public static List<DropDownIntModel> GetRelationships() => Relationships ?? new List<DropDownIntModel>();

    private void HandleJsonException (HttpRequestException ex, string objectName)
    {
        if (ex.Message.Contains(HttpStatusCode.Unauthorized.ToString()))
        {
            loadDataErrorMsg = $"You are not authorised to view this page";
        }
        else if (ex.Message.Contains("404 (Not Found)"))
        {
            loadDataErrorMsg = $"The {objectName} \"{StudentGUID}\" does not exist";
        }
        else if (ex.Message.Contains("400 (Bad Request)"))
        {
            loadDataErrorMsg = $"The {objectName} \"{StudentGUID}\" does not exist";
        }
        else 
        {
            loadDataErrorMsg = $"Error: {ex.Message}";
        }
    }
}
