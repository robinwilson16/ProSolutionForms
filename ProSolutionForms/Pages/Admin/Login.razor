@page "/Admin/Login/{TokenExpired:bool}"
@page "/Admin/Login/{TokenExpired:bool}/{ReturnToPage}"

@page "/Admin/Login"
@page "/Admin/Login/{ReturnToPage}"

@using Microsoft.AspNetCore.WebUtilities
@using ProSolutionForms.Models
@using ProSolutionForms.Services
@using ProSolutionForms.Shared

@inject HttpClient Http
@inject IConfiguration configuration
@inject NavigationManager NavManager
@inject ILogger<Login> Logger
@inject AppData appData
@inject IJSRuntime JSRuntime

<div class="container mt-5">
    <div class="row">
        <div class="col-md-6 m-auto">
            <div class="card GreyBackground">
                <div class="card-body pb-0">
                    <div class="row">
                        <div class="col-md">
                            <h5 class="card-title text-center mb-5"><i class="fa-solid fa-person-walking-dashed-line-arrow-right"></i> Log Into ProSolution Forms</h5>

                            <div class="container">
                                <div class="row">
                                    <div class="col-md text-center">
                                        @if (SystemUser?.Photo != null)
                                        {
                                            <a href="@string.Format("data:{1}+xml;base64,{0}", Convert.ToBase64String(SystemUser?.Photo ?? new byte[0]), "image/jpeg")" type="image/jpeg" download="Profile Photo for @(SystemUser?.Name).jpeg">
                                                <img src="@string.Format("data:{1}+xml;base64,{0}", Convert.ToBase64String(SystemUser?.PhotoThumbnail ?? new byte[0]), "image/jpeg")" class="img-fluid ProfilePhotoLarge" alt="Download Profile Photo for @SystemUser?.Name" />
                                            </a>
                                        }
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md text-center">
                                        <h5>@SystemUser?.Name</h5>
                                    </div>
                                </div>
                            </div>

                            <div class="container">
                                <div class="row">

                                    @if (SystemUser?.Groups?.Count > 0)
                                    {
                                        <div class="col-md">
                                            <div class="accordion" id="accordionGroups">

                                                <div class="accordion-item">
                                                    <h2 class="accordion-header">
                                                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseGroups" aria-expanded="false" aria-controls="collapseGroups">
                                                            Your Groups
                                                        </button>
                                                    </h2>
                                                    <div id="collapseGroups" class="accordion-collapse collapse hide" data-bs-parent="#accordionGroups">
                                                        <div class="accordion-body">
                                                            <ul class="list-group">

                                                                @if (SystemUser?.Groups != null)
                                                                {
                                                                    foreach (var group in SystemUser?.Groups!.OrderBy(g => g.GroupName ?? "")!)
                                                                    {
                                                                        if (RequiredPermissionGroupForFullAccess != null && group.GroupName == RequiredPermissionGroupForFullAccess)
                                                                        {
                                                                            <li class="list-group-item bg-success">@group.GroupName</li>
                                                                        }
                                                                        else if (MISPermissionGroupForFullAccess != null && group.GroupName == MISPermissionGroupForFullAccess)
                                                                        {
                                                                            <li class="list-group-item bg-info">@group.GroupName</li>
                                                                        }
                                                                        else if (SafeguardingPermissionGroupForFullAccess != null && group.GroupName == SafeguardingPermissionGroupForFullAccess)
                                                                        {
                                                                            <li class="list-group-item bg-info">@group.GroupName</li>
                                                                        }
                                                                        else
                                                                        {
                                                                            <li class="list-group-item">@group.GroupName</li>
                                                                        }
                                                                    }
                                                                }

                                                            </ul>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="accordion-item">
                                                    <h2 class="accordion-header">
                                                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseAdvancedDetails" aria-expanded="false" aria-controls="collapseAdvancedDetails">
                                                            Advanced Details
                                                        </button>
                                                    </h2>
                                                    <div id="collapseAdvancedDetails" class="accordion-collapse collapse" data-bs-parent="#accordionGroups">
                                                        <div class="accordion-body">
                                                            <pre class="pre-scrollable InfoDetails p-3">@AdvancedDetails</pre>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }

                                </div>
                            </div>

                            <div class="container mt-3">
                                <div class="row">
                                    <div class="col-md">
                                        <div class="alert alert-primary text-center" role="alert">
                                            <h1>
                                                <i class="fa-solid fa-spinner fa-spin"></i> 
                                            </h1>
                                            <h4>
                                                @Message
                                            </h4>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="container mt-3 mb-3">
                                <div class="row">
                                    <div class="col-md text-center">
                                        <div class="progress" role="progressbar" aria-label="Login Progress" aria-valuenow="@Progress" aria-valuemin="0" aria-valuemax="100">
                                            <div class="progress-bar" style="width: @Progress%"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public string? ReturnToPage { get; set; }
    [Parameter]
    public bool? TokenExpired { get; set; }

    [Parameter]
    public string? AccessToken { get; set; }
    public string? IDToken { get; set; }
    public string? CodeToken { get; set; } //Needed to generate a bearer token
    public string? BearerToken { get; set; } //Needed to access the API
    public string? LoginType { get; set; }
    public string? Action { get; set; }
    public string? Message { get; set; }
    public int? Progress { get; set; }
    public MarkupString? AdvancedDetails { get; set; }

    public SystemUserModel? SystemUser { get; set; }
    public SystemUserModel? alreadyLoggedInUser { get; set; }
    public SystemUserTokenModel? SystemUserToken { get; set; }

    public bool? IsLoggedIn { get; set; }
    public bool? IsPermitted { get; set; }
    public string? RequiredPermissionGroupForFullAccess { get; set; }
    public string? MISPermissionGroupForFullAccess { get; set; }
    public string? SafeguardingPermissionGroupForFullAccess { get; set; }

    //For Testing
    public bool? DisableSelfRedirection { get; set; }
    public bool? DisableRedirectionToOtherPage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        RequiredPermissionGroupForFullAccess = configuration["RequiredPermissionGroupForFullAccess"];
        MISPermissionGroupForFullAccess = configuration["MISPermissionGroupForFullAccess"];
        SafeguardingPermissionGroupForFullAccess = configuration["SafeguardingPermissionGroupForFullAccess"];

        IsLoggedIn = false;
        DisableSelfRedirection = false;
        DisableRedirectionToOtherPage = false;
        Progress = 0;

        //Clear the logged in user if the token has expired so new ones will be generated
        if (TokenExpired == true)
        {
            Action = "GetToken";
            Message = "Getting New Access Token";
            Progress = 50;

            await ClearLoggedInUser();
        }

        alreadyLoggedInUser = await LocalStorageFunctions.GetItem<SystemUserModel>(JSRuntime, Logger, "CurrentUser");

        //Get User Details
        if (appData.CurrentUser?.Email != null)
        {
            //Check if user is already logged in

            SystemUser = appData.CurrentUser;
            UpdateAdvancedDetails();

            IsLoggedIn = true;
            LoginType = "CurrentUser";

            Action = "RedirectUser";
            Message = "Already Authenticated - Redirecting...";
            Progress = 50;

            IsPermitted = IsUserPermitted();
        }
        else if (alreadyLoggedInUser?.Email != null)
        {
            //Check if user logged in previously

            SystemUser = alreadyLoggedInUser;
            UpdateAdvancedDetails();

            IsLoggedIn = true;
            LoginType = "PreviousUser";

            Action = "RedirectUser";
            Message = "Already Authenticated - Redirecting...";
            Progress = 50;

            IsPermitted = IsUserPermitted();
        }
        else
        {
            //Redirect user to Microsoft Online Login if not already logged in
            LoginType = "NewUser";
            await LogUserIn();
        }

        if (IsPermitted != true)
        {
            //User is not authorised to access the system so redirect to unauthorised page
            if (DisableSelfRedirection != true)
                NavManager.NavigateTo("Admin/Unauthorised");
        }

        //Get Code for Bearer Token
        if (SystemUser != null && IsPermitted == true)
        {
            if (SystemUser.CodeToken == null)
            {
                await GetCodeToken();
            }
        }

        if (SystemUser != null && IsPermitted == true)
        {
            if (SystemUser.BearerToken == null)
            {
                Action = "GetBearerToken";
                Message = "Getting New Token To Securely Access System...";
                Progress = 80;

                await ObtainBearerToken();
            }
        }

        if (SystemUser?.BearerToken != null && IsPermitted == true)
        {
            Action = "RedirectUser";
            Message = "Authetication Process Complete - Redirecting...";
            Progress = 90;

            //After a bearer token has been obtained return back to where we were
            GoToLoggedInArea();
        }
    }

    public async Task LogUserIn()
    {
        //Check if user has been redirected from Microsoft Online Login
        RetrieveAccessTokenFromURL();

        //If no access token then login has not been attempted or possibly failed (may need to avoid a redirect loop here)
        if (AccessToken == null)
        {
            Action = "GetUser";
            Message = "Authenticate User...";
            Progress = 10;

            ObtainAccessToken();
        }
        else
        {
            //If an access token has been provided then the user is logged in
            IsLoggedIn = true;

            Action = "CheckUser";
            Message = "Check User Details...";
            Progress = 20;

            await ObtainUserDetails();

            IsPermitted = IsUserPermitted();
        }

        UpdateAdvancedDetails();
    }

    public async Task GetCodeToken()
    {
        //Check if user has been redirected from Microsoft Online Login
        await RetrieveCodeTokenFromURL();

        //If no code token then login has not been atempted or possibly failed (may need to avoid a redirect loop here)
        if (CodeToken == null)
        {
            Action = "GetCodeToken";
            Message = "Obtain Access Token...";
            Progress = 40;

            ObtainCodeToken();
        }
        else
        {
            Action = "CheckCodeToken";
            Message = "Check Access Token...";
            Progress = 60;

            await UpdateUser();
        }

        UpdateAdvancedDetails();
    }

    public void ObtainAccessToken()
    {
        var graphAPI = configuration.GetSection("GraphAPI");
        var login_endpoint = graphAPI["login_endpoint"];
        var domain = graphAPI["domain"];
        var client_id = graphAPI["client_id"];
        var redirect_uri = graphAPI["redirect_uri"];

        if (DisableSelfRedirection != true)
            NavManager.NavigateTo($"{login_endpoint}/{domain}/oauth2/v2.0/authorize?client_id={client_id}&response_type=token+id_token&redirect_uri={redirect_uri}&scope=user.read+openid+profile+email&response_mode=fragment&state=12345&nonce=678910");
    }

    public void RetrieveAccessTokenFromURL()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        var uriQuery = QueryHelpers.ParseQuery(uri.Query); //The return url is not a query string so this does not work due to the hash
        string? bookmark = uri.Fragment; //The part after the hash
        var bookmarkQuery = bookmark.TrimStart('#').Split("&");

        var bookmarkDictionary = new Dictionary<string, string>();
        foreach (var item in bookmarkQuery)
        {
            var keyValue = item.Split('=');
            if (keyValue.Length == 2)
            {
                bookmarkDictionary[keyValue[0]] = keyValue[1];
            }
        }

        //Attempt to obtain access token from bookmark (how it is sent)
        if (bookmarkDictionary.TryGetValue("access_token", out var accessToken))
        {
            AccessToken = accessToken;
        }

        if (bookmarkDictionary.TryGetValue("id_token", out var idToken))
        {
            IDToken = idToken;
        }

        UpdateAdvancedDetails();
    }

    public void ObtainCodeToken()
    {
        var graphAPI = configuration.GetSection("GraphAPI");
        var login_endpoint = graphAPI["login_endpoint"];
        var domain = graphAPI["domain"];
        var client_id = graphAPI["client_id"];
        var redirect_uri = graphAPI["redirect_uri"];

        if (DisableSelfRedirection != true)
            NavManager.NavigateTo($"{login_endpoint}/{domain}/oauth2/v2.0/authorize?client_id={client_id}&response_type=code&redirect_uri={redirect_uri}&scope=user.read+openid+profile+email&response_mode=fragment&state=12345&nonce=678910");
    }

    public async Task RetrieveCodeTokenFromURL()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        var uriQuery = QueryHelpers.ParseQuery(uri.Query); //The return url is not a query string so this does not work due to the hash
        string? bookmark = uri.Fragment; //The part after the hash
        var bookmarkQuery = bookmark.TrimStart('#').Split("&");

        var bookmarkDictionary = new Dictionary<string, string>();
        foreach (var item in bookmarkQuery)
        {
            var keyValue = item.Split('=');
            if (keyValue.Length == 2)
            {
                bookmarkDictionary[keyValue[0]] = keyValue[1];
            }
        }

        //Attempt to obtain code token from bookmark (how it is sent)
        if (bookmarkDictionary.TryGetValue("code", out var codeToken))
        {
            CodeToken = codeToken;
        }

        if (CodeToken != null && SystemUser != null)
        {
            SystemUser.CodeToken = CodeToken;

            //Save the user details
            await UpdateUser();
        }

    }

    public async Task ObtainUserDetails()
    {
        string userEndPoint = $"{configuration["APIEndpoint"]}/SystemUser/{AccessToken}";

        if (AccessToken != null)
        {
            SystemUser = await Http.GetFromJsonAsync<SystemUserModel>(userEndPoint);
        }

        //Save the user details
        await UpdateUser();
    }

    public async Task ObtainBearerToken()
    {
        string tokenEndPoint = $"{configuration["APIEndpoint"]}/SystemUserToken/{SystemUser?.CodeToken}";

        if (SystemUser != null && SystemUser?.CodeToken != null)
        {
            SystemUserToken = await Http.GetFromJsonAsync<SystemUserTokenModel>(tokenEndPoint);

            if (SystemUserToken != null)
            {
                SystemUser.BearerToken = SystemUserToken.BearerToken;
                //Save the user details
                await UpdateUser();
            }
        }
    }

    public bool IsUserPermitted()
    {
        
        
        if (RequiredPermissionGroupForFullAccess != null && IsUserInGroup(RequiredPermissionGroupForFullAccess) == true)
        {
            return true;
        }
        else if (MISPermissionGroupForFullAccess != null && IsUserInGroup(MISPermissionGroupForFullAccess) == true)
        {
            return true;
        }
        else if (SafeguardingPermissionGroupForFullAccess != null && IsUserInGroup(SafeguardingPermissionGroupForFullAccess) == true)
        {
            return true;
        }
        // else if (SystemUser?.Email?.ToLower() == "robin.wilson@shcg.ac.uk" || SystemUser?.Email?.ToLower() == "mark.smith@shcg.ac.uk" || SystemUser?.Email?.ToLower() == "linda.fletcher@shcg.ac.uk")
        // {
        //     //Fix whilst waiting for IT to approve Entra Permissions to Read Group Memberships
        //     return true;
        // }
        else
        {
            return false;
        }
    }

    public bool IsUserInGroup(string groupName)
    {
        return SystemUser?.Groups?.Any(g => g.GroupName == groupName) ?? false;
    }

    public async Task UpdateUser()
    {
        if (SystemUser != null)
        {
            appData.CurrentUser = SystemUser;
            await LocalStorageFunctions.SetItem(JSRuntime, Logger, "CurrentUser", SystemUser ?? new SystemUserModel());
        }
    }

    private void GoToLoggedInArea()
    {
        if (ReturnToPage != null)
        {
            var RedirectPath = Path.Combine(NavManager.BaseUri, "Admin", ReturnToPage);

            if (DisableRedirectionToOtherPage != true)
                NavManager.NavigateTo(RedirectPath);
        }
        else
        {
            var AdminPath = Path.Combine(NavManager.BaseUri, "Admin");

            if (DisableRedirectionToOtherPage != true)
                NavManager.NavigateTo(AdminPath);
        }
    }

    private async Task ClearLoggedInUser()
    {
        //Clear object
        appData.CurrentUser = null;

        if (appData.CurrentUser == null)
        {
            await LocalStorageFunctions.RemoveItem(JSRuntime, Logger, "CurrentUser");
        }
    }

    private void UpdateAdvancedDetails()
    {
        AdvancedDetails = (MarkupString)"<p><strong>Log of Progress Logging In:</strong></p>";

        if (SystemUser?.AccessToken != null)
            AdvancedDetails += $"<p>Access Token:<br />{SystemUser?.AccessToken}</p>";

        if (SystemUser?.CodeToken != null)
            AdvancedDetails += $"<p>Code Token:<br />{SystemUser?.CodeToken}</p>";

        if (SystemUser?.BearerToken != null)
            AdvancedDetails += $"<p>Bearer Token:<br />{SystemUser?.BearerToken}</p>";
    }
}