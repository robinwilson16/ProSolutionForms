@page "/CriminalConviction"
@page "/CriminalConviction/{StudentGUID}"

@using ProSolutionForms.Models
@using System.Net
@inject HttpClient Http
@inject IConfiguration configuration
@inject NavigationManager NavManager
@inject ILogger<CriminalConviction> Logger

<PageTitle>Criminal Conviction Form</PageTitle>

<Modal @ref="modalInfo">
    <Title><i class="fa-solid fa-circle-info"></i> @msgInfoTitle</Title>
    <Body>
        <p>
            @msgInfo
        </p>
    </Body>
    <Footer>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modalError!.Close()">Close</button>
    </Footer>
</Modal>

<Modal @ref="modalError">
    <Title><i class="fa-solid fa-triangle-exclamation"></i> @msgErrorTitle</Title>
    <Body>
        <div class="alert alert-danger" role="alert">
            @msgError
        </div>
        @if (msgErrorStackTrace != null) 
        {
            <p><i class="fa-solid fa-bug"></i> Stack Trace:</p>
            <pre class="pre-scrollable ErrorDetails">@msgErrorStackTrace</pre>
        }
    </Body>
    <Footer>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modalError!.Close()">Close</button>
    </Footer>
</Modal>

<Modal @ref="modalConfirm">
    <Title><i class="fa-solid fa-circle-question"></i> @msgConfirmTitle</Title>
    <Body>
        <p>
            @msgConfirm
        </p>
    </Body>
    <Footer>
        <button type="button" class="btn btn-danger" @onclick="FormAction"><i class="fa-solid fa-trash"></i> Yes</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modalConfirm!.Close()"><i class="fa-solid fa-right-from-bracket"></i> Cancel</button>
    </Footer>
</Modal>

<div class="container">
    <div class="row">
        <div class="col-md text-center">
            <img class="img-fluid CollegeLogo" src="/images/SHCG-Logo-Coloured-RGB.png" title="SHCG Logo" />
        </div>
    </div>
</div>

<div class="bd-callout bd-callout-SHCG-blue bd-callout-grey GreyBackground">
    <div class="container">
        <div class="row">
            <div class="col-md text-center">
                <h3 class="mt-3 mb-3"><i class="fa-solid fa-building-shield"></i> Criminal Conviction Form</h3>
            </div>
        </div>
    </div>

    @if (loadDataErrorMsg != null) 
    {
        <div class="container">
            <div class="row">
                <div class="col-md">
                    <div class="alert alert-danger hstack gap-3" role="alert">
                        <div>
                            <h1><i class="fa-solid fa-triangle-exclamation"></i></h1>
                        </div>
                        <div>
                            <p>
                                @loadDataErrorMsg
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (formSubmitted == true)
    {
        <div class="container">
            <div class="row">
                <div class="col-md">
                    <div class="alert alert-success hstack gap-3" role="alert">
                        <div class="ms-auto me-3">
                            <h1><i class="fa-solid fa-clipboard-check"></i></h1>
                        </div>
                        <div class="me-auto">
                            <h4 class="alert-heading">Criminal Convictions Successfully Submitted</h4>
                            <hr>
                            <p>
                                Thank you for declaring your Criminal Convictions.
                            </p>
                            <p>
                                We will be in touch with you soon to discuss the next steps.
                            </p>
                        </div>
                    </div>
                    <div class="alert alert-secondary" role="alert">
                        <div class="row">
                            <div class="col-md">
                                <button type="button" class="btn btn-primary" @onclick="ResetForm"><i class="fa-solid fa-handcuffs"></i> Add Another Criminal Conviction</button>
                            </div>
                            <div class="col-md text-end">
                                <button type="button" class="btn btn-success" @onclick="GoToSHCGHomepage"><i class="fa-solid fa-arrow-up-right-from-square"></i> Go To The SHCG Website</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else if(student == null) {
        <div class="container">
            <div class="row">
                <div class="col-md">
                    <div class="alert alert-primary text-center" role="alert">
                        <h1>
                            <i class="fa-solid fa-spinner fa-spin"></i> Loading ...
                        </h1>
                    </div>
                </div>
            </div>
        </div>
    }
    else {
        <div class="bd-callout bd-callout-SHCG-yellow bd-callout-grey WhiteBackground">
            <div class="container">
                <div class="row mb-3 align-items-center">
                    <div class="col-md-4">
                        <i class="fa-solid fa-user"></i> Name
                    </div>
                    <div class="col-md-8">
                        <strong>@student?.Forename @student?.Surname</strong>
                    </div>
                </div>
                <div class="row mb-3 align-items-center">
                    <div class="col-md-4">
                        <i class="fa-solid fa-briefcase"></i> Curriculum Area
                    </div>
                    <div class="col-md-8">
                        @student?.TeamName
                    </div>
                </div>
                <div class="row mb-3 align-items-center">
                    <div class="col-md-4">
                        <i class="fa-solid fa-graduation-cap"></i> Course
                    </div>
                    <div class="col-md-8">
                        @student?.CourseCode - @student?.CourseTitle
                    </div>
                </div>
            </div>
        </div>

        <EditForm FormName="CriminalConvictions" Model="criminalConvictions" OnSubmit="SubmitMany">
            <FluentValidationValidator @ref="_fluentValidationValidator" />

            @if (criminalConvictions != null) 
            {
                @if (criminalConvictions.Convictions != null)
                {
                    int? criminalConvictionRow = 0;
                    foreach (var conv in criminalConvictions.Convictions) {
                        criminalConvictionRow++;

                        <div class="bd-callout bd-callout-SHCG-teal bd-callout-grey WhiteBackground">
                            <div class="container">
                                <div class="row">
                                    <div class="col-md">
                                        <div class="row g-3 mb-3">
                                            <div class="col-md-4">
                                                <i class="fa-regular fa-calendar-days"></i> <label class="col-form-label">Date of Offence</label>
                                            </div>
                                            <div class="col-md-8">
                                                <InputDate @bind-Value="conv!.DateOfOffence" class="form-control" />
                                                <ValidationMessage For="@(() => conv!.DateOfOffence)" />
                                            </div>
                                        </div>

                                        <div class="row g-3 mb-3">
                                            <div class="col-md-4">
                                                <i class="fa-solid fa-handcuffs"></i> <label class="col-form-label">Offence</label>
                                            </div>
                                            <div class="col-md-8">
                                                <InputTextArea @bind-Value="conv!.Offence" class="form-control" />
                                                <ValidationMessage For="@(() => conv!.Offence)" />
                                            </div>
                                        </div>

                                        <div class="row g-3 mb-3">
                                            <div class="col-md-4">
                                                <i class="fa-solid fa-book"></i> <label class="col-form-label">Penalty</label>
                                            </div>
                                            <div class="col-md-8">
                                                <InputTextArea @bind-Value="conv!.Penalty" class="form-control" />
                                                <ValidationMessage For="@(() => conv!.Penalty)" />
                                            </div>
                                        </div>

                                        <div class="row g-3 mb-3">
                                            <div class="col-md-4">
                                                <i class="fa-solid fa-comment"></i> <label class="col-form-label">Comments</label>
                                            </div>
                                            <div class="col-md-8">
                                                <InputTextArea @bind-Value="conv!.Comments" class="form-control" />
                                                <ValidationMessage For="@(() => conv!.Comments)" />
                                            </div>
                                        </div>

                                        <div class="row g-3 mb-3">
                                            <div class="col-md-4">
                                                <i class="fa-solid fa-id-card-clip"></i> <label class="col-form-label">Contact Name</label>
                                            </div>
                                            <div class="col-md-8">
                                                <InputText @bind-Value="conv!.ContactName" class="form-control" />
                                                <ValidationMessage For="@(() => conv!.ContactName)" />
                                            </div>
                                        </div>
                                        <div class="row g-3 mb-3">
                                            <div class="col-md">
                                                <div class="d-grid gap-2 d-md-block text-end">
                                                    <button type="button" class="btn btn-danger" @onclick="() => RemoveCriminalConvictionConfirm(conv?.CriminalConvictionID ?? 0)"><i class="fa-solid fa-rectangle-xmark"></i> Remove This Offence</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
            }

            <ValidationSummary />

            <div class="container">
                <div class="row">
                    <div class="col-md">
                        <div class="d-grid gap-2 d-md-block text-end">
                            <button type="button" class="btn btn-primary mb-3" @onclick="AddAnotherConviction"><i class="fa-solid fa-file-circle-plus"></i> Record Details of Another Offence</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="alert alert-secondary" role="alert">
                <div class="row">
                    <div class="col-md">
                        <div class="d-grid gap-2 d-md-block text-center">
                            <button type="submit" class="btn btn-success me-md-3"><i class="fa-solid fa-paper-plane"></i> Submit</button>
                            <button type="button" class="btn btn-warning" @onclick="ClearFormConfirm"><i class="fa-solid fa-eraser"></i> Clear</button>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    }
</div>

@code {
    [Parameter]
    public string? StudentGUID { get; set; }

    bool formSubmitted = false;

    //Hide navbar in layout component
    [CascadingParameter]
    public MainLayout? Layout { get; set; }

    protected override void OnInitialized()
    {
        if (Layout != null) {
            Layout.HideNav();
        }
    }

    public int? criminalConvictionID { get; set; }
    public string? action { get; set; }

    private Modal? modalInfo { get; set; }
    public string? msgInfoTitle = null;
    public MarkupString? msgInfo = null;

    private Modal? modalError { get; set; }
    public string? msgErrorTitle = null;
    public MarkupString? msgError = null;
    public string? msgErrorStackTrace = null;

    private Modal? modalConfirm { get; set; }
    public string? msgConfirmTitle = null;
    public MarkupString? msgConfirm = null;


    public CriminalConvictionModel? criminalConviction { get; set; }
    public ICollection<CriminalConvictionModel>? criminalConvictionList { get; set; }
    [SupplyParameterFromForm]
    public CriminalConvictionsModel? criminalConvictions { get; set; }

    private FluentValidationValidator? _fluentValidationValidator;

    public string? loadDataErrorMsg = null;

    private StudentModel? student;
    private string? studentEndPoint;

    private string? submitEndPoint;

    protected override async Task OnInitializedAsync()
    {
        if (StudentGUID == null) {
            loadDataErrorMsg = $"Your form could not be loaded. Please ensure you are using the link that was sent to you";
        }
        else {
            studentEndPoint = $"{configuration["APIEndpoint"]}/Student/{StudentGUID}";
            try
            {
                student = await Http.GetFromJsonAsync<StudentModel>(studentEndPoint);

                //Create objects to hold form entries
                CreateNewObjects();
            }
            catch (HttpRequestException ex)
            {
                if (ex.Message.Contains(HttpStatusCode.Unauthorized.ToString()))
                {
                    loadDataErrorMsg = $"You are not authorised to view this page";
                }
                else if (ex.Message.Contains("404 (Not Found)"))
                {
                    loadDataErrorMsg = $"Your form could not be loaded. Please ensure you are using the link that was sent to you";
                }
                else if (ex.Message.Contains("400 (Bad Request)"))
                {
                    loadDataErrorMsg = $"Your form could not be loaded. Please ensure you are using the link that was sent to you";
                }
                else loadDataErrorMsg = $"Error: {ex.Message}";
            }
        }
    }

    public void CreateNewObjects()
    {
        //Main Model
        criminalConviction = AddConviction();

        //Parent Model
        criminalConvictions = new CriminalConvictionsModel();

        criminalConvictionList = new List<CriminalConvictionModel>();
        criminalConvictionList.Add(criminalConviction);

        criminalConvictions.Convictions = criminalConvictionList;
    }

    private CriminalConvictionModel AddConviction()
    {
        CriminalConvictionModel newConviction = new CriminalConvictionModel();
        newConviction.CriminalConvictionID = criminalConvictions?.Convictions?.Count + 1 ?? 1;
        newConviction.CreatedBy = student?.Email;
        newConviction.CreatedDate = DateTime.Now;
        newConviction.StudentDetailID = student?.StudentDetailID;
        newConviction.AcademicYearID = student?.AcademicYearID;
        newConviction.StudentRef = student?.StudentRef;

        return newConviction;
    }

    private void AddAnotherConviction()
    {
        CriminalConvictionModel newConviction = AddConviction();
        criminalConvictions?.Convictions?.Add(newConviction);
    }

    private void ResetForm()
    {
        //Reset form
        ClearForm();
        formSubmitted = false;
    }

    private async Task SubmitForm()
    {
        //Not using this now as submitting many at once (below)

        formSubmitted = true;
        Logger.LogInformation("Id = {Id}", criminalConviction?.CriminalConvictionID);

        submitEndPoint = $"{configuration["APIEndpoint"]}/CriminalConviction";
        try
        {
            if (criminalConviction != null)
            {
                HttpResponseMessage formResponse = await Http.PostAsJsonAsync<CriminalConvictionModel>(submitEndPoint, criminalConviction);

                if (formResponse.IsSuccessStatusCode != true)
                {
                    string responseBody = await formResponse.Content.ReadAsStringAsync();
                    action = "Error";

                    msgErrorTitle = $"Cannot Submit Form";
                    msgError = (MarkupString)$"Unfortunately the form could not be submitted successfully due to an error.<br />Please check your network connection and attempt to submit again.";
                    msgErrorStackTrace = responseBody;

                    modalError!.Open();
                }
            }
            else
            {
                action = "Error";

                msgErrorTitle = $"Cannot Submit Form";
                msgError = (MarkupString)$"Unfortunately the form could not be submitted successfully due to an error.<br />Please try again.";
                msgErrorStackTrace = null;

                modalError!.Open();
            }

        }
        catch (HttpRequestException ex)
        {
            HandleJsonException(ex, "GUID");
        }
    }

    private async Task SubmitMany()
    {
        if (await _fluentValidationValidator!.ValidateAsync())
        {
            formSubmitted = true;
            Logger.LogInformation("Id = {Id}", criminalConviction?.CriminalConvictionID);

            submitEndPoint = $"{configuration["APIEndpoint"]}/CriminalConviction/Many";
            try
            {
                if (criminalConvictions?.Convictions?.Count > 0)
                {
                    //Clear out IDs set earlier as database will set these
                    foreach (var conv in criminalConvictions?.Convictions!)
                    {
                        conv.CriminalConvictionID = 0;
                    }

                    HttpResponseMessage formResponse = await Http.PostAsJsonAsync<ICollection<CriminalConvictionModel>>(submitEndPoint, criminalConvictions.Convictions!);

                    if (formResponse.IsSuccessStatusCode != true) {
                        string responseBody = await formResponse.Content.ReadAsStringAsync();
                        action = "Error";

                        msgErrorTitle = $"Cannot Submit Form";
                        msgError = (MarkupString)$"Unfortunately the form could not be submitted successfully due to an error.<br />Please check your network connection and attempt to submit again.";
                        msgErrorStackTrace = responseBody;

                        modalError!.Open();
                    }
                }
                else
                {
                    action = "Error";

                    msgErrorTitle = $"Cannot Submit Form";
                    msgError = (MarkupString)$"Unfortunately the form could not be submitted successfully due to an error.<br />Please try again.";
                    msgErrorStackTrace = null;

                    modalError!.Open();
                }

            }
            catch (HttpRequestException ex)
            {
                HandleJsonException(ex, "GUID");
            }
        }
    }

    private void GoToSHCGHomepage() {
        NavManager.NavigateTo("https://www.shcg.ac.uk");
    }

    private void FormAction() {
        //Determine what clear form button should do on dialog box

        if (action == "ClearFormConfirm") {
            ClearForm();
        }
        else if (action == "RemoveCriminalConvictionConfirm")
        {
            RemoveCriminalConviction();
        }
        else {
            action = "Error";

            msgErrorTitle = $"Invalid Action";
            msgError = (MarkupString)$"An invalid option was specified. Please try again.";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    private void ClearFormConfirm() {
        action = "ClearFormConfirm";

        msgConfirmTitle = $"Clear Form?";
        msgConfirm = (MarkupString)$"Are you sure you want to clear all {criminalConvictions?.Convictions?.Count ?? 0} entries?";

        modalConfirm!.Open();
    }

    private void ClearForm() {
        action = "ClearForm";

        criminalConviction = new CriminalConvictionModel();
        criminalConvictions = new CriminalConvictionsModel();
        criminalConvictionList = new List<CriminalConvictionModel>();
        criminalConvictionList.Add(criminalConviction);

        criminalConvictions.Convictions = criminalConvictionList;

        modalConfirm!.Close();
    }

    private void RemoveCriminalConvictionConfirm(int recordID)
    {
        criminalConvictionID = recordID;
        action = "RemoveCriminalConvictionConfirm";

        msgConfirmTitle = $"Remove Criminal Conviction?";
        msgConfirm = (MarkupString)$"Are you sure you want to remove this criminal conviction?";

        modalConfirm!.Open();
    }

    private void RemoveCriminalConviction()
    {
        action = "RemoveCriminalConviction";

        modalConfirm!.Close();

        if (criminalConvictions?.Convictions?.Count > 1) {
            var recordToDelete = criminalConvictionList?
                .Where(c => c.CriminalConvictionID == criminalConvictionID).FirstOrDefault();

            if (recordToDelete != null) {
                criminalConvictionList?
                .Remove(recordToDelete);
            }
            else {
                action = "Error";

                msgErrorTitle = $"Cannot Remove This Offence";
                msgError = (MarkupString)$"There was an error removing the offence. Please try again.";
                msgErrorStackTrace = null;

                modalError!.Open();
            }
        }
        else {
            action = "Error";

            msgErrorTitle = $"Cannot Remove Last Offence";
            msgError = (MarkupString)$"This offence cannot be removed as you must send us details of at least one offence.";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    private void HandleJsonException(HttpRequestException ex, string objectName)
    {
        if (ex.Message.Contains(HttpStatusCode.Unauthorized.ToString()))
        {
            loadDataErrorMsg = $"You are not authorised to view this page";
        }
        else if (ex.Message.Contains("404 (Not Found)"))
        {
            loadDataErrorMsg = $"The {objectName} \"{StudentGUID}\" does not exist";
        }
        else if (ex.Message.Contains("400 (Bad Request)"))
        {
            loadDataErrorMsg = $"The {objectName} \"{StudentGUID}\" does not exist";
        }
        else
        {
            loadDataErrorMsg = $"Error: {ex.Message}";
        }
    }
}
