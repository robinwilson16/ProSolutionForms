@page "/CriminalConviction"
@page "/CriminalConviction/{StudentGUID}"
@page "/CriminalConviction/{AcademicYearIDPart1:int}/{AcademicYearIDPart2:int}/{StudentGUID}"

@using ProSolutionForms.Components
@using ProSolutionForms.Models
@using ProSolutionForms.Shared
@using System.Net
@inject HttpClient Http
@inject IConfiguration configuration
@inject NavigationManager NavManager
@inject ILogger<CriminalConviction> Logger

<PageTitle>Criminal Conviction Form</PageTitle>

<Modal @ref="modalInfo">
    <WindowControls>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => modalInfo!.Close()"></button>
    </WindowControls>
    <Title><i class="fa-solid fa-circle-info"></i> @msgInfoTitle</Title>
    <Body>
        <p>
            @msgInfo
        </p>
    </Body>
    <Footer>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => modalError!.Close()"><i class="fa-solid fa-rectangle-xmark"></i> Close</button>
    </Footer>
</Modal>

<Modal @ref="modalError">
    <WindowControls>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => modalInfo!.Close()"></button>
    </WindowControls>
    <Title><i class="fa-solid fa-triangle-exclamation"></i> @msgErrorTitle</Title>
    <Body>
        <div class="alert alert-danger" role="alert">
            @msgError
        </div>
        @if (msgErrorStackTrace != null) 
        {
            <p><i class="fa-solid fa-bug"></i> Stack Trace:</p>
            <pre class="pre-scrollable ErrorDetails">@msgErrorStackTrace</pre>
        }
    </Body>
    <Footer>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => modalError!.Close()"><i class="fa-solid fa-rectangle-xmark"></i> Close</button>
    </Footer>
</Modal>

<Modal @ref="modalConfirm">
    <WindowControls>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => modalInfo!.Close()"></button>
    </WindowControls>
    <Title><i class="fa-solid fa-circle-question"></i> @msgConfirmTitle</Title>
    <Body>
        <p>
            @msgConfirm
        </p>
    </Body>
    <Footer>
        <button type="button" class="btn btn-danger" @onclick="FormAction"><i class="fa-solid fa-trash"></i> Yes</button>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => modalConfirm!.Close()"><i class="fa-solid fa-right-from-bracket"></i> Cancel</button>
    </Footer>
</Modal>

<div class="container">
    <div class="row">
        <div class="col-md text-center">
            <img class="img-fluid CollegeLogo" src="/images/SHCG-Logo-Coloured-RGB.png" title="SHCG Logo" />
        </div>
    </div>
</div>

<div class="bd-callout bd-callout-SHCG-blue bd-callout-grey GreyBackground">
    <div class="container">
        <div class="row">
            <div class="col-md text-center">
                <h3 class="mt-3 mb-3"><i class="fa-solid fa-building-shield"></i> Criminal Conviction Form</h3>
            </div>
        </div>
    </div>

    @if (loadDataErrorMsg != null) 
    {
        <div class="container">
            <div class="row">
                <div class="col-md">
                    <div class="alert alert-danger hstack gap-3" role="alert">
                        <div>
                            <h1><i class="fa-solid fa-triangle-exclamation"></i></h1>
                        </div>
                        <div>
                            <p>
                                @loadDataErrorMsg
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (formSubmitted == true)
    {
        <div class="container">
            <div class="row">
                <div class="col-md">
                    <div class="alert alert-success hstack gap-3" role="alert">
                        <div class="ms-auto me-3">
                            <h1><i class="fa-solid fa-clipboard-check"></i></h1>
                        </div>
                        <div class="me-auto">
                            <h4 class="alert-heading">Criminal Convictions Successfully Submitted</h4>
                            <hr>
                            <p>
                                Thank you for declaring your Criminal Convictions.
                            </p>
                            <p>
                                We will be in touch with you soon to discuss the next steps.
                            </p>
                        </div>
                    </div>
                    <div class="alert alert-secondary" role="alert">
                        <div class="row">
                            <div class="col-md">
                                <button type="button" class="btn btn-primary" @onclick="ResetForm"><i class="fa-solid fa-handcuffs"></i> Add Another Criminal Conviction</button>
                            </div>
                            <div class="col-md text-end">
                                <button type="button" class="btn btn-success" @onclick="GoToSHCGHomepage"><i class="fa-solid fa-arrow-up-right-from-square"></i> Go To The SHCG Website</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else if(student == null) {
        <div class="container">
            <div class="row">
                <div class="col-md">
                    <div class="alert alert-primary text-center" role="alert">
                        <h1>
                            <i class="fa-solid fa-spinner fa-spin"></i> Loading ...
                        </h1>
                    </div>
                </div>
            </div>
        </div>
    }
    else {
        <div class="bd-callout bd-callout-SHCG-yellow bd-callout-grey WhiteBackground">
            <div class="container">
                <div class="row mb-3 align-items-center">
                    <div class="col-md-4">
                        <i class="fa-solid fa-hashtag"></i> Student Ref
                    </div>
                    <div class="col-md-8">
                        @student?.StudentRef
                    </div>
                </div>
                <div class="row mb-3 align-items-center">
                    <div class="col-md-4">
                        <i class="fa-solid fa-user"></i> Name
                    </div>
                    <div class="col-md-8">
                        <strong>@student?.Forename @student?.Surname</strong>
                    </div>
                </div>
                <div class="row mb-3 align-items-center">
                    <div class="col-md-4">
                        <i class="fa-solid fa-calendar-days"></i> Academic Year
                    </div>
                    <div class="col-md-8">
                        @student?.AcademicYearID
                    </div>
                </div>
            </div>
        </div>

        <div class="alert alert-primary hstack gap-3" role="alert">
            <div>
                <h1><i class="fa-solid fa-circle-info"></i></h1>
            </div>
            <div>
                <p>
                    South Hampshire College Group has a duty of care to the college community to ensure their safety. In order to meet these responsibilities, it is necessary for all students to declare any relevant convictions, cautions and warnings to enable the College to make a judgement on any particular risks. This includes any criminal investigations you may currently be involved in.
                </p>
                <p>
                    Having a criminal record will not necessarily stop anyone from securing a place on a college course but a separate risk assessment or further checks may be required.
                </p>
            </div>
        </div>

        @if (existingCriminalConviction?.Offences?.Count > 0)
        {
            <div class="alert alert-warning hstack gap-3" role="alert">
                <div>
                    <h1><i class="fa-solid fa-clipboard-check"></i></h1>
                </div>
                <div>
                    <p>
                        You have already declared @existingCriminalConviction?.Offences?.Count Offences. If you wish to declare further offences you did not previously declare then please add these below, otherwise we have your information and will be in touch soon.
                    </p>
                    <p>
                        Having a criminal record will not necessarily stop anyone from securing a place on a college course but a separate risk assessment or further checks may be required.
                    </p>
                </div>
            </div>
        }

        <EditForm FormName="CriminalConviction" Model="criminalConviction" OnSubmit="SubmitForm">
            <FluentValidationValidator @ref="_fluentValidationValidator" />

            @if (criminalConviction != null)
            {
                @if (criminalConviction.Offences != null)
                {
                    int? offenceRow = 0;
                    foreach (var offence in criminalConviction.Offences)
                    {
                        offenceRow++;

                        <div class="bd-callout bd-callout-SHCG-teal bd-callout-grey WhiteBackground">
                            <div class="container">
                                @if (offenceRow == 1)
                                {
                                    <div class="row mb-3 align-items-center">
                                        <div class="col-md text-center">
                                            <h4>Details of Criminal Offences and/or Ongoing Criminal Investigations</h4>
                                        </div>
                                    </div>

                                    <div class="row g-3 mb-3">
                                        <div class="col-md-4">
                                            <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> If you do not have any offences or ongoing investigations to declare then please tick this box and complete only the consent and declaration section, otherwise please instead complete the information below</label>
                                        </div>
                                        <div class="col-md-8">
                                            <CustomBoolInputSelect @bind-Value="criminalConviction!.NoOffencesToDeclare" class="form-select d-none">
                                                <option value="">-- Please Select --</option>
                                                <option value="true">Yes</option>
                                                <option value="false">No</option>
                                            </CustomBoolInputSelect>
                                            <div class="d-grid gap-2 d-md-block">
                                                <button type="button" class="btn @(criminalConviction!.NoOffencesToDeclare == true? "btn-primary" : "btn-outline-primary") me-md-3" @onclick="(e) => NoOffencesToDeclareToggle()"><i class="@(criminalConviction!.NoOffencesToDeclare == true? "fa-solid fa-square-check" : "fa-regular fa-square")"></i></button>
                                            </div>
                                            <ValidationMessage For="@(() => criminalConviction!.NoOffencesToDeclare)" />
                                        </div>
                                    </div>
                                }
                                <div class="row">
                                    <div class="col-md">

                                        <div class="row g-3 mb-3">
                                            <div class="col-md-4">
                                                <i class="fa-regular fa-calendar-days"></i> <label class="col-form-label">Date of Conviction/Investigation</label>
                                            </div>
                                            <div class="col-md-8">
                                                <InputDate @bind-Value="offence!.DateOfOffence" class="form-control" />
                                                <ValidationMessage For="@(() => offence!.DateOfOffence)" />
                                            </div>
                                        </div>

                                        <div class="row g-3 mb-3">
                                            <div class="col-md-4">
                                                <i class="fa-solid fa-handcuffs"></i> <label class="col-form-label">Offence</label>
                                            </div>
                                            <div class="col-md-8">
                                                <InputTextArea @bind-Value="offence!.Offence" class="form-control" />
                                                <ValidationMessage For="@(() => offence!.Offence)" />
                                            </div>
                                        </div>

                                        <div class="row g-3 mb-3">
                                            <div class="col-md-4">
                                                <i class="fa-solid fa-book"></i> <label class="col-form-label">Penalty</label>
                                            </div>
                                            <div class="col-md-8">
                                                <InputTextArea @bind-Value="offence!.Penalty" class="form-control" />
                                                <ValidationMessage For="@(() => offence!.Penalty)" />
                                            </div>
                                        </div>

                                        <div class="row g-3 mb-3">
                                            <div class="col-md-4">
                                                <i class="fa-solid fa-comment"></i> <label class="col-form-label">Comments</label>
                                            </div>
                                            <div class="col-md-8">
                                                <InputTextArea @bind-Value="offence!.Comments" class="form-control" />
                                                <ValidationMessage For="@(() => offence!.Comments)" />
                                            </div>
                                        </div>

                                        <div class="row g-3 mb-3">
                                            <div class="col-md-4">
                                                <i class="fa-solid fa-id-card-clip"></i> <label class="col-form-label">Name and contact details of Probation Officer, Youth Justice Contact, Drugs Worker, or other where applicable</label>
                                            </div>
                                            <div class="col-md-8">
                                                <InputText @bind-Value="offence!.ContactName" class="form-control" />
                                                <ValidationMessage For="@(() => offence!.ContactName)" />
                                            </div>
                                        </div>

                                        <div class="row g-3 mb-3">
                                            <div class="col-md">
                                                <div class="d-grid gap-2 d-md-block text-end">
                                                    <button type="button" class="btn btn-danger" @onclick="() => RemoveOffenceConfirm(offence?.CriminalConvictionOffenceID ?? 0)"><i class="fa-solid fa-rectangle-xmark"></i> Remove This Offence</button>
                                                </div>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
            }

            <div class="container">
                <div class="row">
                    <div class="col-md">
                        <div class="d-grid gap-2 d-md-block text-end">
                            <button type="button" class="btn btn-primary mb-3" @onclick="AddAnotherOffence"><i class="fa-solid fa-file-circle-plus"></i> Record Details of Another Offence</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="bd-callout bd-callout-SHCG-green bd-callout-grey WhiteBackground">
                <div class="container">
                    <div class="row">
                        <div class="col-md">
                            <div class="row mb-3 align-items-center">
                                <div class="col-md text-center">
                                    <h4>Consent and Delaration</h4>
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> If you are <strong>18 or over</strong> at the start of your course, I confirm, by ticking this box, I agree all information provided is correct to the best of my knowledge?</label>
                                </div>
                                <div class="col-md-8">
                                    <CustomBoolInputSelect @bind-Value="criminalConviction!.AgreeInfoIsCorrectStudent" class="form-select d-none">
                                        <option value="">-- Please Select --</option>
                                        <option value="true">Yes</option>
                                        <option value="false">No</option>
                                    </CustomBoolInputSelect>
                                    <div class="d-grid gap-2 d-md-block">
                                        <button type="button" class="btn @(criminalConviction!.AgreeInfoIsCorrectStudent == true? "btn-primary" : "btn-outline-primary") me-md-3" @onclick="(e) => AgreeInfoIsCorrectStudentToggle()"><i class="@(criminalConviction!.AgreeInfoIsCorrectStudent == true? "fa-solid fa-square-check" : "fa-regular fa-square")"></i></button>
                                    </div>
                                    <ValidationMessage For="@(() => criminalConviction!.AgreeInfoIsCorrectStudent)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label"><i class="fa-solid fa-file-contract"></i> Student name:</label>
                                </div>
                                <div class="col-md-8">
                                    <InputText @bind-Value="criminalConviction!.SignedStudent" class="form-control" />
                                    <ValidationMessage For="@(() => criminalConviction!.SignedStudent)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label"><i class="fa-regular fa-calendar-days"></i> Date</label>
                                </div>
                                <div class="col-md-8">
                                    <InputDate @bind-Value="criminalConviction!.SignedStudentDate" class="form-control" />
                                    <ValidationMessage For="@(() => criminalConviction!.SignedStudentDate)" />
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </div>

            <div class="alert alert-warning hstack gap-3" role="alert">
                <div>
                    <h1><i class="fa-solid fa-circle-info"></i></h1>
                </div>
                <div>
                    <p>
                        Please note:
                        <ul>
                            <li>The information provided will only be seen by the safeguarding panel for the group and will be stored securely.</li>
                            <li>If you are currently involved in a criminal investigation or you are convicted of a criminal offence after you have applied or started on your college course, you will need to inform us.</li>
                            <li>If you fail to reveal a criminal conviction, caution or warning this may end any enrolment agreement with the College</li>
                        </ul>
                    </p>
                </div>
            </div>

            <ValidationSummary />

            <div class="alert alert-secondary" role="alert">
                <div class="row">
                    <div class="col-md">
                        <div class="d-grid gap-2 d-md-block text-center">
                            <button type="submit" class="btn btn-success me-md-3"><i class="fa-solid fa-paper-plane"></i> Submit</button>
                            <button type="button" class="btn btn-warning" @onclick="ClearFormConfirm"><i class="fa-solid fa-eraser"></i> Clear</button>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    }
</div>

@code {
    [Parameter]
    public string? StudentGUID { get; set; }
    [Parameter]
    public int? AcademicYearIDPart1 { get; set; }
    [Parameter]
    public int? AcademicYearIDPart2 { get; set; }

    public string? AcademicYearID { get; set; }

    bool formSubmitted = false;

    //Hide navbar in layout component
    [CascadingParameter]
    public MainLayout? Layout { get; set; }

    protected override void OnInitialized()
    {
        if (Layout != null) {
            Layout.HideNav();
        }
    }

    public int? criminalConvictionOffenceID { get; set; }
    public string? action { get; set; }

    private Modal? modalInfo { get; set; }
    public string? msgInfoTitle = null;
    public MarkupString? msgInfo = null;

    private Modal? modalError { get; set; }
    public string? msgErrorTitle = null;
    public MarkupString? msgError = null;
    public string? msgErrorStackTrace = null;

    private Modal? modalConfirm { get; set; }
    public string? msgConfirmTitle = null;
    public MarkupString? msgConfirm = null;

    [SupplyParameterFromForm]
    public CriminalConvictionModel? criminalConviction { get; set; }
    public IList<CriminalConvictionOffenceModel>? offences { get; set; }

    public CriminalConvictionModel? existingCriminalConviction { get; set; }

    private FluentValidationValidator? _fluentValidationValidator;

    public string? loadDataErrorMsg = null;

    private StudentModel? student;
    private string? studentEndPoint;

    private string? submitEndPoint;

    protected override async Task OnInitializedAsync()
    {
        bool isError = false;

        if (AcademicYearIDPart1 != null && AcademicYearIDPart2 != null)
            AcademicYearID = $"{AcademicYearIDPart1.ToString()}/{AcademicYearIDPart2.ToString()}";

        if (StudentGUID == null) {
            isError = true;
            loadDataErrorMsg = $"Your form could not be loaded. Please ensure you are using the link that was sent to you";
        }
        else {
            if (AcademicYearID != null)
                studentEndPoint = $"{configuration["APIEndpoint"]}/Student/{AcademicYearID}/{StudentGUID}";
            else
                studentEndPoint = $"{configuration["APIEndpoint"]}/Student/{StudentGUID}";

            try
            {
                student = await Http.GetFromJsonAsync<StudentModel>(studentEndPoint);

                //Create objects to hold form entries
                CreateNewObjects();
            }
            catch (HttpRequestException ex)
            {
                isError = true;
                HandleJsonException(ex, "GUID", StudentGUID ?? "");
            }

            if (isError != true)
            {
                string criminalConvictionEndPoint = $"{configuration["APIEndpoint"]}/CriminalConviction/{student?.AcademicYearID}/{student?.StudentGUID}";
                Console.WriteLine($"Load data from {criminalConvictionEndPoint}");

                try
                {
                    existingCriminalConviction = await Http.GetFromJsonAsync<CriminalConvictionModel>(criminalConvictionEndPoint);
                }
                catch (HttpRequestException ex)
                {
                    //Not Found
                }
            }
        }
    }

    public void CreateNewObjects()
    {
        //Main Model
        criminalConviction = CreateNewCriminalConviction();
        offences = new List<CriminalConvictionOffenceModel>();
        offences.Add(CreateNewOffence());

        criminalConviction.Offences ??= offences;
    }

    private CriminalConvictionModel CreateNewCriminalConviction()
    {
        CriminalConvictionModel newCriminalConviction = new CriminalConvictionModel();
        newCriminalConviction.CreatedBy = student?.Email;
        newCriminalConviction.CreatedDate = DateTime.Now;
        newCriminalConviction.StudentDetailID = student?.StudentDetailID;
        newCriminalConviction.AcademicYearID = student?.AcademicYearID;
        newCriminalConviction.StudentRef = student?.StudentRef;
        newCriminalConviction.StudentGUID = student?.StudentGUID;

        return newCriminalConviction;
    }

    private CriminalConvictionOffenceModel CreateNewOffence()
    {
        CriminalConvictionOffenceModel newOffence = new CriminalConvictionOffenceModel();
        newOffence.CriminalConvictionOffenceID = criminalConviction?.Offences?.Count + 1 ?? 1;

        return newOffence;
    }

    private void AddAnotherOffence()
    {
        CriminalConvictionOffenceModel newOffence = CreateNewOffence();
        criminalConviction?.Offences?.Add(newOffence);
    }

    private void ResetForm()
    {
        //Reset form
        ClearForm();
        formSubmitted = false;
    }

    private async Task SubmitForm()
    {
        if (await _fluentValidationValidator!.ValidateAsync())
        {
            //Not using this now as submitting many at once (below)

            formSubmitted = true;
            Logger.LogInformation("Id = {Id}", criminalConviction?.CriminalConvictionID);

            submitEndPoint = $"{configuration["APIEndpoint"]}/CriminalConviction";
            try
            {
                if (criminalConviction != null)
                {
                    //Clear out IDs set earlier as database will set these
                    if (criminalConviction?.Offences != null)
                    {
                        foreach (var offence in criminalConviction?.Offences!)
                        {
                            offence.CriminalConvictionOffenceID = 0;
                        }
                    }
                    
                    HttpResponseMessage formResponse = await Http.PostAsJsonAsync<CriminalConvictionModel>(submitEndPoint, criminalConviction);

                    if (formResponse.IsSuccessStatusCode != true)
                    {
                        string responseBody = await formResponse.Content.ReadAsStringAsync();
                        action = "Error";

                        msgErrorTitle = $"Cannot Submit Form";
                        msgError = (MarkupString)$"Unfortunately the form could not be submitted successfully due to an error.<br />Please check your network connection and attempt to submit again.";
                        msgErrorStackTrace = responseBody;

                        modalError!.Open();
                    }
                }
                else
                {
                    action = "Error";

                    msgErrorTitle = $"Cannot Submit Form";
                    msgError = (MarkupString)$"Unfortunately the form could not be submitted successfully due to an error.<br />Please try again.";
                    msgErrorStackTrace = null;

                    modalError!.Open();
                }

            }
            catch (HttpRequestException ex)
            {
                HandleJsonException(ex, "GUID", StudentGUID ?? "");
            }
        }
    }

    // private async Task SubmitMany()
    // {
    //     if (await _fluentValidationValidator!.ValidateAsync())
    //     {
    //         formSubmitted = true;
    //         Logger.LogInformation("Id = {Id}", criminalConviction?.CriminalConvictionID);

    //         submitEndPoint = $"{configuration["APIEndpoint"]}/CriminalConviction/Many";
    //         try
    //         {
    //             if (criminalConviction?.Offences?.Count > 0)
    //             {
    //                 //Clear out IDs set earlier as database will set these
    //                 foreach (var conv in criminalConviction?.Offences!)
    //                 {
    //                     conv.CriminalConvictionOffenceID = 0;
    //                 }

    //                 HttpResponseMessage formResponse = await Http.PostAsJsonAsync<ICollection<CriminalConvictionOffenceModel>>(submitEndPoint, criminalConviction!);

    //                 if (formResponse.IsSuccessStatusCode != true) {
    //                     string responseBody = await formResponse.Content.ReadAsStringAsync();
    //                     action = "Error";

    //                     msgErrorTitle = $"Cannot Submit Form";
    //                     msgError = (MarkupString)$"Unfortunately the form could not be submitted successfully due to an error.<br />Please check your network connection and attempt to submit again.";
    //                     msgErrorStackTrace = responseBody;

    //                     modalError!.Open();
    //                 }
    //                 else
    //                 {
    //                     List<CriminalConvictionOffenceModel> insertedCriminalConvictions = await formResponse.Content.ReadFromJsonAsync<List<CriminalConvictionOffenceModel>>() ?? new List<CriminalConvictionOffenceModel>();

    //                     if (insertedCriminalConvictions.Count > 0)
    //                     {
    //                         //If insert successful
    //                     }
    //                     else
    //                     {
    //                         action = "Error";

    //                         msgErrorTitle = $"Cannot Submit Form";
    //                         msgError = (MarkupString)$"Unfortunately the form could not be submitted successfully due to an error.<br />Please check your network connection and attempt to submit again.";
    //                         msgErrorStackTrace = null;

    //                         modalError!.Open();
    //                     }
    //                 }
    //             }
    //             else
    //             {
    //                 action = "Error";

    //                 msgErrorTitle = $"Cannot Submit Form";
    //                 msgError = (MarkupString)$"Unfortunately the form could not be submitted successfully due to an error.<br />Please try again.";
    //                 msgErrorStackTrace = null;

    //                 modalError!.Open();
    //             }

    //         }
    //         catch (HttpRequestException ex)
    //         {
    //             HandleJsonException(ex, "GUID", StudentGUID ?? "");
    //         }
    //     }
    // }

    private void GoToSHCGHomepage() {
        NavManager.NavigateTo("https://www.shcg.ac.uk");
    }

    public void NoOffencesToDeclareToggle()
    {
        if (criminalConviction != null)
        {
            if (criminalConviction.NoOffencesToDeclare == true)
            {
                criminalConviction.NoOffencesToDeclare = false;
            }
            else
            {
                criminalConviction.NoOffencesToDeclare = true;
            }
        }
    }

    public void AgreeInfoIsCorrectStudentToggle()
    {
        if (criminalConviction != null)
        {
            if (criminalConviction.AgreeInfoIsCorrectStudent == true)
            {
                criminalConviction.AgreeInfoIsCorrectStudent = false;
            }
            else
            {
                criminalConviction.AgreeInfoIsCorrectStudent = true;
            }
        }
    }

    private void FormAction() {
        //Determine what clear form button should do on dialog box

        if (action == "ClearFormConfirm") {
            ClearForm();
        }
        else if (action == "RemoveOffenceConfirm")
        {
            RemoveOffence();
        }
        else {
            action = "Error";

            msgErrorTitle = $"Invalid Action";
            msgError = (MarkupString)$"An invalid option was specified. Please try again.";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    private void ClearFormConfirm() {
        action = "ClearFormConfirm";

        msgConfirmTitle = $"Clear Form?";
        msgConfirm = (MarkupString)$"Are you sure you want to clear all {criminalConviction?.Offences?.Count ?? 0} entries?";

        modalConfirm!.Open();
    }

    private void ClearForm() {
        action = "ClearForm";

        CreateNewObjects();

        modalConfirm!.Close();
    }

    private void RemoveOffenceConfirm(int recordID)
    {
        criminalConvictionOffenceID = recordID;
        action = "RemoveOffenceConfirm";

        msgConfirmTitle = $"Remove Offence?";
        msgConfirm = (MarkupString)$"Are you sure you want to remove this offence?";

        modalConfirm!.Open();
    }

    private void RemoveOffence()
    {
        action = "RemoveOffence";

        modalConfirm!.Close();

        if (criminalConviction?.Offences?.Count > 1) {
            var recordToDelete = criminalConviction?.Offences?
                .Where(c => c.CriminalConvictionOffenceID == criminalConvictionOffenceID).FirstOrDefault();

            if (recordToDelete != null) {
                criminalConviction?.Offences?
                .Remove(recordToDelete);
            }
            else {
                action = "Error";

                msgErrorTitle = $"Cannot Remove This Offence";
                msgError = (MarkupString)$"There was an error removing the offence. Please try again.";
                msgErrorStackTrace = null;

                modalError!.Open();
            }
        }
        else {
            action = "Error";

            msgErrorTitle = $"Cannot Remove Last Offence";
            msgError = (MarkupString)$"This offence cannot be removed as you must send us details of at least one offence.";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    private void HandleJsonException(HttpRequestException ex, string objectName, string objectID)
    {
        if (ex.Message.Contains(HttpStatusCode.Unauthorized.ToString()))
        {
            loadDataErrorMsg = $"You are not authorised to view this page";

            //Redirect to login screen
            //NavManager.NavigateTo($"Login/Vehicles");
        }
        else if (ex.Message.Contains("404 (Not Found)"))
        {
            loadDataErrorMsg = $"The {objectName} \"{objectID}\" is not found";
        }
        else if (ex.Message.Contains("400 (Bad Request)"))
        {
            loadDataErrorMsg = $"The {objectName} \"{objectID}\" resulted in an invalid request";
        }
        else
        {
            loadDataErrorMsg = $"Error: {ex.Message}";
        }
    }
}
