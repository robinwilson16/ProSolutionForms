@inherits LayoutComponentBase
@using ProSolutionForms.Components
@using ProSolutionForms.Models
@using ProSolutionForms.Services
@using ProSolutionForms.Shared
@using System.Reflection;

@inject NavigationManager NavigationManager
@inject ILogger<StudentDetailModel> Logger
@inject AppData appData
@inject IJSRuntime JSRuntime

<CascadingValue Value="this">
    <div class="page @Background">
        @if (ShowNavMenu != false) {
            <div class="sidebar" style="@IconMenuCssClass">
                <NavMenu ShowIconMenu="ToggleIconMenu" />
            </div>
        }

        <main>
            <div class="top-row px-4">
                <div class="row h-100 w-100">
                    @if (SystemUser?.Email != null)
                    {
                        <div class="col-md align-content-center">
                            @* <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a> *@
                            <img class="img-fluid CollegeLogoHeader" src="/images/SHCG-Logo-Coloured-RGB.png" title="SHCG Logo" />
                        </div>
                        <div class="col-md align-content-center text-end">
                            <img src="@string.Format("data:{1}+xml;base64,{0}", Convert.ToBase64String(SystemUser?.PhotoThumbnail ?? new byte[0]), "image/jpeg")" class="img-fluid ProfilePhoto" alt="Download Profile Photo for @SystemUser?.Name" /> 
                            <span class="ms-3">@SystemUser?.Name</span>
                            <a class="btn btn-secondary" href="Admin/Logout" role="button"><i class="fa-solid fa-person-walking-dashed-line-arrow-right"></i> Log Out</a>
                        </div>
                    }
                    else
                    {
                        <div class="col-md align-content-center text-end">
                            @* <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a> *@
                            <img class="img-fluid CollegeLogoHeader" src="/images/SHCG-Logo-Coloured-RGB.png" title="SHCG Logo" />
                        </div>
                    }
                    
                </div>
                
            </div>

            <article class="content px-4">
                <Toast @ref="toastNewVersionAvailable" ToastRef="toastNewVersionAvailable">
                    <Title>
                        <i class="fa-solid fa-download"></i> <strong class="me-auto"> @toastNewVersionAvailableTitle</strong>
                    </Title>
                    <Subtitle>
                        @toastNewVersionAvailableSubtitle
                    </Subtitle>
                    <Body>
                        @toastNewVersionAvailableText
                    </Body>
                    <Footer>
                        <button type="button" class="btn btn-primary btn-sm" @onclick="() => ServiceWorkerFunctions.UpdateServiceWorker(JSRuntime, NavigationManager)" data-bs-dismiss="toast"><i class="fa-solid fa-square-check"></i> Update to Latest Version</button>
                        <button type="button" class="btn btn-danger btn-sm" data-bs-dismiss="toast"><i class="fa-solid fa-square-xmark"></i> Ignore</button>
                    </Footer>
                </Toast>

                @Body
            </article>
        </main>
    </div>
</CascadingValue>

@code {
    private string? PageAndParams;
    private IList<string>? PageParts;
    private string? PageRef;
    private string? Background;
    public bool? ShowNavMenu { get; set; }

    private bool _iconMenuActive { get; set; }
    private string? IconMenuCssClass => _iconMenuActive ? "width: 82px;" : null;

    private Toast? toastNewVersionAvailable { get; set; }
    public string? toastNewVersionAvailableTitle = null;
    public string? toastNewVersionAvailableSubtitle = null;
    public MarkupString? toastNewVersionAvailableText = null;

    public SystemUserModel? SystemUser { get; set; }
    public SystemUserModel? AlreadyLoggedInUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetUser();

        //Hide navigation for students
        if (SystemUser?.Email != null)
            ShowNav();
        else
            HideNav();

        ApplyBackground();

        ActiveVersion = await ServiceWorkerFunctions.GetCurrentVersionNumber(JSRuntime);

        //Run this each time the location changes
        NavigationManager.LocationChanged += OnLocationChanged;

        toastNewVersionAvailableTitle = "New Version Available";
        toastNewVersionAvailableSubtitle = $"Version {ProductVersion}";
        toastNewVersionAvailableText = (MarkupString)$"Version {ProductVersion} of ProSolution Forms is now available and you are running {ActiveVersion}. To avoid any errors please update to the latest version as soon as possible";
        toastNewVersionAvailable?.DisableAutohide();
    }

    public void OnLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        ShowNav();

        ApplyBackground();

        StateHasChanged();
    }

    public void ApplyBackground()
    {
        PageAndParams = NavigationManager.Uri.Replace(NavigationManager.BaseUri, "");
        PageParts = PageAndParams.Split("/");
        if (PageParts.Count > 0)
        {
            if (PageParts[0] == "Admin" && PageParts.Count >= 2)
            {
                PageRef = PageParts[1];
            }
            else
            {
                PageRef = PageParts[0];
            }
            
        }
        else
        {
            PageRef = PageAndParams;
        }

        if (PageRef == "Login" || PageRef == "Logout" || PageRef == "Unauthorised" || PageRef == "")
        {
            Background = "BackgroundEffect";
        }
        else
        {
            Background = "";
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private string? ActiveVersion { get; set; }
    private string? ProductVersion = Assembly.GetExecutingAssembly().GetName().Version?.ToString();

    private async Task SetVersionNumber()
    {
        await JSRuntime.InvokeVoidAsync("serviceWorkerInterop.setVersionNumber", ProductVersion);
    }

    private async Task GetCurrentVersionNumber()
    {
        try
        {
            ActiveVersion = await JSRuntime.InvokeAsync<string>("serviceWorkerInterop.getVersionNumber");
        }
        catch
        {
            ActiveVersion = ProductVersion;
        }
    }

    public void HideNav() {
        ShowNavMenu = false;
        StateHasChanged();
    }

    public void ShowNav()
    {
        ShowNavMenu = true;
        StateHasChanged();
    }

    //Toggle full or icon sidebar
    protected void ToggleIconMenu(bool iconMenuActive)
    {
        _iconMenuActive = iconMenuActive;
    }

    public async Task GetUser()
    {
        AlreadyLoggedInUser = await LocalStorageFunctions.GetItem<SystemUserModel>(JSRuntime, Logger, "CurrentUser");

        if (appData.CurrentUser?.Email != null)
            SystemUser = appData.CurrentUser;
        else if (AlreadyLoggedInUser?.Email != null)
            SystemUser = AlreadyLoggedInUser;
        else
            SystemUser = null;
    }
}